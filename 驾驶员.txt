槽渔滩
   1     2    3      4     5    6
1 6：30 8：30 10：20 12：10 2：20 5：20 
2 7：00 8：55 10：45 12：40 2：45 4：00
3 7：30 9：20 11：10 1：20  3：10 4：20
4 8：10 9：55 11：40 1：55  3：40 4：40


   1     2    3      4     5    6
             9：40
1 6：30 8：30 10：30 12：25 1：55 4：00 5：20
2 7：00 8：55 10：55 1：20  2：40 4：00
             11：10
3 7：30 9：20 11：30 1：40  3：10 4：20
4 8：10 9：55 11：55 2：00  3：40 4：40


人工费 驾驶员4000/30=   134天 
      售票员1700/30=    57天 
油费                   107天
折旧费 420000／8／12/30=145/天
维修费 二保500/4/30=      5.6天 
      打黄油20/4/30=      0.23天
税    年审 
      保险10000/12/30=  28/天
管理费 800/30=          26.7天
 合计500元
--------------------------
﻿http://www.3334a.com/
http://www.lu654.com/鬼逝
http://www.e5zo5j.yfxjjt.com/

-----客车上下客------------
    开门首先门无人
    监控提醒才开门
    
    关门首先门无人
    监控后镜才关门
   
    提前挂档开关门
    节约时间要安全
    
    鸣喇提醒路上人
    节假民俗知客源
    班次时间抢客源
------------------------    
   
       行车守则

    行车首先把路看
    看远估近定轮位
    提前预见勤修正
    两耳随时动机听
    根据声音档速变
    平稳节能记安全
    遇事减速心不慌
    避人保物稳方向

    随时注意有无超
    眼耳后镜知八方
    仪表路标不忘掉
    车况路况早知道
    
    路标一定仔细看
    知位定路确方向
    路口选道看路标
    减速停车左右观
    障碍减速仔细看
    骑挂躲让定轮位
    
    节能操作常滑行
    经济时速低油门
    少用低档早高档
    提前预见车少停
    
    平缓空滑陡带档
    冲车带档常丢油
               
    错走莫慌前调头
    下一出口桥下找

    左脚正对定左轮    
    车中三点估右轮 
    估右定左不忘高
    需要哪边定哪边
    门角正对保险杠
    后镜轮眉定轮尾

    倒车首先侧后看
    左右安全才起步
    后镜轮眉定轮位
    观后不忘前轮位
        
    跟车首先保车距
    跟据路况早预见

    超车首先侧后看
    打向闪灯喇叭按
    车前三点定轮位
    加速超车后镜看
    打向慢回转向关
    弯道禁超保安全
    
    会车首先定轮位
    定右挂左稳方向
    变灯按喇稳速度
    

    上车首先四周看
    车货轮胎油水量
    确认安全左手开
    左扶踩踏跨入内
    左脚收入顺关门
    踩离到底调椅背
    镜内见路见车体

    左十右三握方向
    左脚常放离左下
    右脚放在油门上 
    不许下看盲控制
    离合操作快停慢
    平稳加油不高转

    发动首先踩制动
    踩离拉刹档杆晃
    加油发动五秒停
    高低转速要正常
       技1
    起步首先挂低档
    打向鸣喇后镜看
    侧后安全手刹松
    加油抬离听声音
    音变车斗稍一停
    松开制动跟油门
    慢抬离合车前进
    车正入道转向回
    起步困难半离合
    加油慢抬巧配合       
       技2
    加档首先把车冲
    听声加油看车速
    声音速度都提高
    踩离松油同挂空
    抬离再踩加一档
    加油抬离半联停
    慢抬加油要平稳
 
    减档首先听声音
    加油看速估动力
    声闷速降带不起
    踩离松油同挂空
    抬离不忘空油上
    踩离减档看车速
    加油稍大半联停
    慢抬加油动力足
    
    加速随时备加档
    减速必须减一档
    加档必须逐级加
    减档越级看车速
       技3
    转弯首先侧后看
    减速打向喇叭按
    靠右慢进定轮位
    以后定前取角度
    侧后安全加速度
    慢进快出记心田
    三把方向把路变
    甩头回正回方向
    早打早回提前量
    跟据速度转快慢
       技4
    减速首先松油门
    轻重踩刹看车速
    一踩一稳降速度
    速降踩离把速稳
    慢抬停车惯性稳
       技5
    停车靠边先选位
    打向减速侧后看
    踩离挂空调速度
    安全靠边定轮位  
    回正车身后镜看
    踩离停车同回向
    拉紧手刹才媳火
    驻档抬离松制动

    下车首先取钥匙
    侧后安全半开门
    左扶踩踏取物品
    摇窗关紧锁好门
    车货轮胎查安全
    垫好轮胎人才离
===================================
网上预约
http://sc.122.gov.cn/
身份证号
ig79oz09~ 
===================================

﻿   1米  2米  3米   4米  5米  6米

 4 0017 0041 0073 0113 0186 0224

 6 0035 0079 0134 0201 0280 0373

 8 006  013  021  031  043  056

10 009  019  031  045  061  078

12 013  027  043  062  082  105

14 017  036  058  083  111  142

16 022  047  075  106  141  179

18 027  059  093  132  174  219

20 034  072  114  160  210  264

22 041  086  137  191  250  313

24 048  102  161  225  293  366

26 057  120  188  262  340  423

28 066  138  217  302  391  484

30 075  158  248  344  444  549

==================================

  7米   8米   9米  10米 

 4 0297 0382 0481 0594 
 
 6 0481 0603 0743 0899 

 8 071  087  106  127  

10 098  120  144  170

12 130  157  187  219

==================================

3米6 周长/7x2=直径＆(周长-34)/35=直径

4米10 不能降锯短 先看弯端再搰大小

5米14          先摸圆扁再下锯

6米14          锯斜不锯正

==================================

  1.5米 2.2米 4.2米 4.4米

 4 0027 0047 0122 0132

 6 0055 0089 0216 0231

 8 009  015  034  036

10 014  022  048  051

12 020  030  065  069

14 026  040  089  094 

16 032  052  113  120

18 042  065  140  148

20 052  080  170  180

22 062  096  203  214

24 074  114  239  252

26 086  133  277  293

28 099  154  319  337

30 113  176  364  383

=================================

热血江湖手游枪职业输出暴力，是个大家都喜欢的职业。下面为大家带来热血江湖手游邪派鬼枪攻略。
14
5 7 11 15
技能搭配

主动技能：枪刃乱舞，幻魔烈魂，血雨鬼泣，枪跃龙门！气功：怒意之吼，横练太保，以退为进，转守为攻！绝技：醉舞狂歌，这技能打boss和pk谁用谁知道！

宠物

宠物，有条件买龙猫，很不错的宠物，至于咕咕鸡看个人，想要排行就买，平民完全没必要！培养三个，一个龙猫，一个火龙，一个狼！之前听说火龙后期没用，反正我不觉得，最起码挂机用起来很OK！

坐骑：

1.黑马一定要买，有能力老虎也要买，因为坐骑战力都是直接加到人物的，还有关键的洗练属性！

2.至于带什么出战，唯一的区别就是坐骑主动技能，我带的是白马，因为老虎碎片不够升星，不知道老虎技能，以后再考虑！

3.坐骑洗练，我觉得洗练是攻击-暴击-命中-防御-气血-其他！可能我理解有误，但是攻击是必须的，洗练没有技巧，完全看脸！

战力提升：

有能力充到v5 最好，挂机不错，而且能买成长礼包，挺不错的！或者v9因为可以买试炼次数，长期下来经验太多！神豪随意！

前期不要买强化石，除非你特别豪，反正我加起来买了40个中级就收手了！因为魔王也会出，我现在四个8，两个7！勉强不算差吧！前期最主要就是等级，有条件多挂机！

生产等级每天也可以做一下，紫色装备直接卖，不要分解，材料没用，生产等级我主要做初级宠物经验丹，因为要能量少，而且材料也好弄，后期生产等级绝对有用的！

宝石和大部分游戏一样一般都带攻击，气血，防御，不过我自己各自带了个命中，暴击，闪避！可能不对，但是挺好用的！

需要注意的就是宝石一到三级有能力直接买三级宝石，比你升级便宜很多！一级二级直接出售换能量！会省挺多的！

反正我也是这么提升的，没什么别的隐藏东西！暂时就想到这么多！

击杀魔王：

如果有条件一定要参加，一定要参加，一定要参加，重要的事情说三遍！基本上我们装备产出都在这了，而且是不绑定的！

我打了三天，还不是一直打，因为有工作，已经卖了5000多元宝！所以一定要参加！

宠物有龙猫用龙猫，没有就用火龙！给大家科普下，没事尽量自动然后点冷却好的技能，伤害会多不少！

我玩枪主要就是打这个给力，一般排行第一第二！这游戏职业不怎么平衡！枪，剑亲儿子，弓，刀后妈生的！医生是丢掉的孩子……

附上我交易图，免得有人不信……

材料兑换：

前期需要换，买的东西：

1地魔之眼碎片，前期帮贡全部换地魔之眼碎片，击杀魔王也会掉，最快速度把这个神兵弄出来，你会发现很多材料容易不少！我第三天晚上出的，全部宝箱都是我的...

2正邪功勋旗子，选择邪派最大的痛苦就是正魔战场排队一晚上进不去...这时候你必须买旗子、可以换很多好东西，而且这个不是消耗功勋换东西，而是你达到多少功勋，刷新出来的全能换！

3.五绝碑文碎片：提升五绝等级，我主升怪乞，因为他给神兵弓碎片！

竞技场：宠物碎片

帮贡：地魔之眼碎片，气功书！

劫镖帮贡：优先称号！

会武：有老虎坐骑优先老虎坐骑碎片！没有就换自己需要的坐骑碎片！
-------------------------------
1.气功：打魔王要的带的气功(破甲刺魂丶怒意之 吼丶以退为进丶横练太保)

2.技能：技能的话带(威凌天下丶枪刃狂舞丶疾风天狼破丶嗜血天狼击，嗜血天狼击是血量低于70%伤害最终翻倍，所以打魔王先把血狼降到70%以下)绝技带(醉舞狂歌)打魔王不要先开，第一次火龙刀变身完在用。

3.神兵：神兵的话打魔王的时候先去刷一波小怪把怒气刷满，魔王一出直接开神兵。

神兵第一次变身 先用火龙刀，如果魔王血掉的慢可以开3次神兵，第二次还是变火龙刀打，(这个要按每个区的情况来开，有些区BOSS是变身不了3次，当然装备有怒炎增加怒气的除外)第三次神兵用神枪，神枪的变身很重要，要在魔王还剩2条血的时候才开，不能提前开也不能迟了开，这时候开配合天赋五烈神枪伤害爆炸，也是打伤害主要输出。

还有神兵带的4个技能一定要神满，4个技能点满你会发现你打魔王的输出会提升一大截。(注意：打魔王要把设置里挂机设置自动野外地图神兵变身关掉，不然会自动变身，控制不来时间。VI5以上会自动开的。所以要手动关掉)。

4.宠物：龙猫配合第一次变身火龙刀打，第一波火龙刀快结束的时候进攻号角也可以用了，号角用了立马切换宠物小雪狼打怒气，为第二次神兵变身刷怒气。

怒气刷满了就切回龙猫，因为龙猫打的输出很高。注：(宠物自带的4个技能优先升级龙猫然后是小雪狼，兽灵丹建议 拍卖行宠物里购买，比商城便宜很多)我以前都是商城买的坑了很多元宝。

5.坐骑：坐骑出征(乌骓宝马)优先升到3星带2个孔装备后天骑术(战如熊虎丶铁马金戈(有钱的土豪可以升满5星带人马合一))。

坐骑洗练：枪优先洗出(攻击丶暴击丶其次命中，追加伤害(追加伤害要点开第四个洗练孔才能洗出来))其他属性看个人元宝充足洗，有钱就固定前面说的，元宝不充足洗出橙色或者红色的可以不洗了。

6.强化和升级：升级的话平均升，基本跟等级升，如果升级服不够，优先升(武器 丶戒子丶鞋子)。其他看升级符的富裕来点。

强化优先强化(武器丶护腕丶戒子，)平均升，其他平均跟着升。升级符和强化不要商城买，完全没必要的，每天试练副本(地下宝藏会掉落)足够升级和强化了。(土豪有钱可以去商城买来点强化，毕竟强化到后面加的属性很可观的)

7.内甲： 内甲有玄阴丶烈阳丶太虚。枪选烈阳就行，烈阳加的攻击很猛!内甲升级主要靠试练副本里的(冰原激斗)掉落的材料来升级(土豪可以直接商城买材料升级满级(大概要元宝4W-5W元宝可以一次性升满)

内甲天赋加点个人加法(强攻丶怒炎丶撩切)剩下的因为我也没点到也没试过，所以暂时不知道怎么点，靠大家补脑了!

8.绝技：五绝试练，优先第三个乞丐，出(醉舞狂歌丶和神兵玄武破天弓（注：这把神弓PK打架一流）)

声望优先打每五关的BOS掉落的声望物品比较多，当然关数越高的，掉落越多的。(还有商城土豪可以买每天限购10个的五绝碑文碎片 每个100绑定元宝 一个200点声望)

9.PK：这游戏PK其实也没什么说的，对枪来说，目前基本都是不是你秒我，就是我秒你，没啥技术好言!

PK带的技能和上面说的一样， 气功就带(怒意之吼丶乾坤 挪移丶以退为进丶横练太保)，绝技(带醉舞狂歌注：该技能免疫6秒控制，满级10秒!)因为枪怕控制所以必带。

神兵在没有出玄武破天弓的时候就带彼岸花。PK坐骑建议带老虎，老虎先天技能加命中，后天骑术建议带(马踏环铃、百毒不侵’)老虎没三星有二个孔可以带追风坐骑。

10.势力战：关于势力战很多人都说正派不行，正派总是说输，其实是很多人不会玩，进去都是自己玩自己的。.势力战个人建议帮会或者整个区找战力不是很低的组队进去，只要不是碰到对面变态级土豪大神基本不会输。

首先进去，优先把左右2边小雕像打掉，然后中推中间的大雕像。最后集体推对面水晶。势力战里面是优先推塔的，杀人是其次，推掉一个雕像分数给的很多的比你杀人多，如果你推掉一个水晶，比大神杀30-40个人的分都多，因为里面是按排名给功勋的，也是目前功勋获得的主要来源。(除了势力战获得功勋还有就是商城可以买，土豪专属商城)。

11.试炼副本：试练副本里的试练之地每天必须打，要升级必须打，V9可以购买一次.V13可以购买2次 剩下的试练副本，看个人元宝情况购买。

12.帮派拉镖：每天下午2点到3点和晚上7点30到8点30，拉之前要看下帮会祝福满没满，没满自己有经济可以点下，或者叫帮会土豪点，加成满的经验是多297%!当然小帮会就不多说。

13.帮会自创武功： 个人每次是劲点满(加伤害的)，御点满(点的越高冷却时间越短)自创10级以后会多个追，追点满(中间的控)，剩下的随便点，其实也就剩下一点可以点其他的。至于能不能出优，就看个人人品的，这是看运气出的。

14.限时活动：每天限时活动必须要做的，(正义之心，正邪道场，秘宝矿洞，江湖告急)(不是每天都有的，是分开天数的)

15.还有新区的一个活动，征战天下达成每个目标给的材料很多的，必须做的!

16.新区成长基金，如果想玩下去建议必买

还有新区的，挂机看个人战力挂，最佳是挂比自己高10级的怪经验多，前提你能扛得住!
-----------------------------
枪客，热血江湖手游中的高暴击高伤害输出职业，到后期技能有很多，只能用4个，那么枪客技能选择哪些好？怎么搭配好呢？

￼

1转之前的就用基础的4个职业不用多说；20级1转之后，用两个新技能替换“鹰击长空”和“天神万钧”2个基础技能；

【2转pk】

枪跃龙门+1转的2个技能+2转的伤害技能

【2转pve】

枪刃狂舞+1转的buff技能+2转的2个技能

【3转pk】

1转的Buff技能+2转的伤害技能+3转的2个技能

【3转pve】

枪刃狂舞+1转的Buff技能+2转的Buff技能+2转的Buff技能

因为部分技能名称还未知，所以后续可能再修改，大家主要看好技能的效果选择就行。比如pk就多用伤害+控制技能；pve刷怪打副本用群攻的，加buff的技能。








=================================

孙子兵法
五事七计知型势
利害五危辨虚实
诈利分合争易胜
弱守强攻以少胜
====================================
排行
少，文，忠，
====================================
A1大型客车：车长>6米，核载=>20人
A2牵引车
A3公交车
B1中型客车：车长<6米，核载10-19
B2大型货车：车长>总质量12吨
C1
C2
C3
C4
D
E
F
  中型货车
  小型客车：车长<6米，核载<9
  微型客车：车长<3.5米，排量<1升 
===================================
淘(支付)宝 /lizhongquan008@163.com
手银      \13548248078
密码      /ig**oz**
         \l**hon**uan
图吧 SESP-XYBZ-35KZ-5NQA 
mspsbc3
太平洋网吧8个6
http://www.rayfile.com/files/2a27c42b-f48e-11e0-ba78-0015c55db73d/ http://www.cnblogs.com/ 
 http://down.51cto.com/ 
lzqwsqm 19790209
 http://www.pudn.com/
==================================
DG8FV-B9TKY-FRT9J-6CRCC-XPQ4G

MSDN Windows XP Professional With Sp3 Vol
卷标:GRTMPVOL_CN
大小:630237184 字节
MD5:E74D72F3D90456003E9E02BA0FB7DA61
SHA1:D142469D0C3953D8E4A6A490A58052EF52837F0F
CRC32:FFFFFFFF
下载地址:http://yuner.qupan.com/2107946.html

1、制作U盘启动盘（小马）
2、进入dos，fdisK分区
   A.do you wish to enable large disk support[Y/N]问是否支持大硬盘输入Y
     
    **硬盘分区的原则是∶先创建主分区，再创建扩展分区，将扩展分区分为N个逻辑分区最后设置活动分区**。
   
   B.如有多个硬盘输入5选择要分区的硬盘
   C.1. create dos pratition or logical dos drive创建分区输入1 
     create primar dos partition创建主分区verfying drove integrity,0% complete等待扫描进度do you wish to use the maximum available size for a primary dos partition and make the partition active是否将全部硬盘空间分配给主分区输入N
   D.verfying drove integrity,0%complete等待扫描进度enter partition size inmbytes or percent of disk space(%)to creare aprimary dos patition输入准备分配给主分区的容量，可输入大小***MB，也可用%输入 press esc to cintinue按“Esc”键退回主菜单
   E.输入1创建分区输入2 create extemded dos partition创建扩展分区enter partition size in mbytes or percent of disk dpace(%)to creare an extended dos partition输入准备分配给扩展分区的容量，可输入大小 ***MB，也可用%输入。因为硬盘上只能有主分区(最多可设4个)、扩展分区(      逻辑分区在扩展分区里)和空闲空间(即未分配空间)三种，如果不将除主分区之外的所有硬盘容量分配给扩展分区，就会产生无用的空闲空间做成浪费 ，因此这里标示出来的容量不能更改，直接按Enter回车键后press esc to cintinue按“Esc”键退回主菜
   F.No logical drivcs fcgoncd提示没有逻辑分区输verfying drove integrity,0% complete等待扫描进度enter partition size in mbytes or percent of disk space(%)to creare an extended dos partition输入准备分配给逻辑分区的容量，可输入大小***MB，也可用%输入。。。。all availablc space in the Extcndcd DOS partition is assigncd to logical drivcs提示全部扩展分区容量分配完按“Esc”键退回主菜
   G.输入2设置活动分区，输入1选择C盘，按“Esc”键退回主菜，按“Esc”键 退出FDISK提示要重新启动系统使设置生效，所有更改的分区在重启后格式化才能使用，按“Esc”键退出，按“R”键或（Ctrl+Alt+Delete）重启
3、格式化 Format x:(x为盘符，系统安装盘必须格式化)
4、进入WinPE拷贝安装文件
5、进入dos
6、x:回车进入各盘。dir x:查看各盘。找出系统（C)盘和安装文件夹I386各在哪个盘
7、format x:格式化系统盘
8、回Dos盘letassig /M x:=C: C:=x:纠正c盘符错乱
9、进入安装文件夹盘smartdrv直到有反应
10、cd i386进入文件夹
11、winnt按照提示操作
12、设置电脑
   A、右击任务栏，点击属性。任务栏下取消分组相似任务栏按钮，选择显示快速启动。[开始]菜单下选择经典[开始]菜单。点应用，点确定。
   B、右击桌面，点击设置。屏幕分辨率为1024x768.
   C、右击我的电脑，点击属性，环境变量。xxx用户变量与系统变量分别将TEMP、TMP编辑到D:\Temp或其它盘。点确定。
   D、右击我的文档，点击属性。目标文件夹编辑到D或其它盘。点应用，点确定。
   E、左双击打开我的文档，点工具，文件夹选项，查看。高级设置中取消隐藏已知文件类型的扩展名。点应用，点确定。
   F、右击Internet Explorer属性,Internet临时文件中点设置点移动文件夹选择D或其它盘。点确定。
   G、右击网上邻居，点击属性。创建一个新的连接；连接到Internet；手动设置我的连接；用拨号调制解调器连接（调制解调器选择moto的那个就对了）；ISP输入defy；电话号码输入*99#；用户名密码不填，其于选项不勾选；选择在我的桌面上添加一个到止连接的快捷方式点完成后拨号，会出现拨号成功了（1、准备MOTO的驱动，就是那个motohelper的USB驱动,检查设备管理器中调制解调器有moto USB Modem.2、USB线连接手机,选择摩托罗拉门户方式.手机上网接入点选择3gnet，移动的话就用cmnet.3、电脑上查       看网络连接应该有很多本地连接之类的。应该有一个本地连接为Motorola USB Networking Driver，这个说明驱动正常。）
   H、将以下内容复制成 清除系统垃圾.bat 并运行。
-----------------------------------------------------------------
del /s/f/q "D:\Temp\*.*" 
rd /s /q "%windir%\temp" 
rd /s /q "%userprofile%\Local Settings\temp" 
del /s/f/q "D:\Temporary Internet Files\*.*" 
rd /s /q "%userprofile%\Local Settings\Temporary Internet Files" 
del /f /q %systemdrive%\*.tmp 
del /f /q %systemdrive%\*._mp 
del /f /q %systemdrive%\*.log 
del /f /q %systemdrive%\*.gid 
del /f /q %systemdrive%\*.chk 
del /f /q %systemdrive%\*.old 
del /a /f /q %systemdrive%\Recycler\*.* 
del /f /q "%ALLUSERSPROFILE%\Documents\DrWatson\*.*" 
del /f /q "%USERPROFILE%\Application Data\Microsoft\Office\Recent\*.lnk" 
del /a /f /s /q "%systemroot%\temp\*.*" 
del /a /f /s /q "%systemroot%\Prefetch\*.*" 
del /f /q /s /a "%systemroot%\minidump\*.*" 
del /a /f /s /q "%systemroot%\*.log" 
del /a /f /s /q "%systemroot%\*.dmp" 
del /a /f /s /q "%systemroot%\*.tmp" 
del /a /f /s /q "%systemroot%\*._mp" 
del /a /f /s /q "%systemroot%\*.gid" 
del /a /f /s /q "%systemroot%\*.bak" 
del /a /f /s /q "%systemroot%\*.old" 
del /a /f /s /q "%systemroot%\*.query" 
for /d %%a in ("%systemroot%\$*$") do rd /s /q "%%a" 
reg query "HKCU\software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" /v Cache>%temp%\cleantmp.txt 
reg query "HKCU\software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" /v Cookies>>%temp%\cleantmp.txt 
reg query "HKCU\software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" /v History>>%temp%\cleantmp.txt 
reg query "HKCU\software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" /v NetHood>>%temp%\cleantmp.txt 
reg query "HKCU\software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" /v Recent>>%temp%\cleantmp.txt 
for /f "tokens=3*" %%a in (%temp%\cleantmp.txt) do ( 
	for /d %%i in ("%%a %%b\*.*") do rd /s /q "%%i" 
	del /a /f /s /q "%%a %%b\*.*" 
) 

echo. 
for /l %%i in (1,1,30000) do @echo %%i  
---------------------------------------------------------------------
安装文件工具wrar390sc.exe、uiso9_cn.exe

12.安装主板芯片组驱动。
13.安装DirectX驱动
14.安装显卡驱动
15.安装声卡网卡等插在主板上的其他设备驱动。
16.安装打印机、扫描仪等其他外设驱动。
17.安装组件
18.安装应用软件

Windows XP pro零售版，安装后必须在30天内联网激活。

工行密钥：MRX3F-47B9T-2487J-KWKMF-RPWBY，

安装时请输入。工行密钥虽然出来已经很长时间了，但是仍然可以正常激活并通过验证，系统运行很流畅，建议大家使用。

关于VOL 和 VLK 解析——  VOL是Volume Licensing for organizations 的简称，中文即“团体批量许可证”。根据这个许可，当企业或者政府需要大量购买微软操作系统时可以获得优惠。这种产品的光盘卷标带有"VOL"字样，就取"Volume"前3个字母，以表明是批量。这种版本根据购买数量等又细分为“开放式许可证”(Open License)、“选择式许可证(Select License)”、“企业协议(Enterprise Agreement)”、“学术教育许可证(Academic Volume Licensing)”等5种版本。根据VOL计划规定， VOL产品是不需要激活的。
  VLK不是一种独立版本。VLK的全称是Volume Licensing Key ，它是指VOL版本在部署(deploy)中所需要的 KEY，而且只能用于VOL版中。简而言之，对VOL版XP来说，VLK就是PID为640的安装 KEY 。例如，上海市政府VOL版XP所带的安装

KEY：DG8FV-B9TKY-FRT9J-6CRCC-XPQ4G

就是一个VLK。VLK的作用仅仅是证明产品合法化。按照许可协议，零售版XP的“密钥”只能用在一台PC上，而 VOL 版XP则可按协议供给多台PC使用。还有一个重要的区别，零售版XP需要激活，而 VOL 版XP根本就没有这个概念。VOL版的XP没有Home这个版本，其功能跟 Professional版是一样的。

====================================
我们立足于美利坚合众国，对全球华人服务，受北美法律保护。版权所有，未经授权禁止建立镜像。未满18岁或被误导来到这里，请立即离开
 
========场地考========================
准备：
坐上车看左右后视镜能否看到后轮
看左右前视镜能否看到车前角和雨刮器座
将坐橙调到最前系上安全带
举左手照像
听到语音开始
打左转向
数123（防不能感应）
挂档
松手刹
加油抬离合松刹车起步（防熄火溜车）
调速度


倒桩：
右脚踩着白线直走
过了黄色虚线停
挂倒档
加油抬离合松刹车起步
调速度
看左后镜直倒
看黄色底线刚要到仪表盘边时打死方向
看右后镜车身与中杆要小于两手掌时回一圈方向打死
车入库要正时回方向回正
看中后杆使车身与杆一手掌宽直倒
看左边紫花对着小草踩人对着时停
打一圈方向
挂1档
加油抬离合松刹车起步打死方向人到中线回死方向
车到中前杆停
打死方向
挂倒档
加油抬离合松刹车起步看左后镜调速度
当车尾看到后中杆回方向一圈再回一圈
车正回正看左边紫花对着小草踩人对着时停
打一圈方向
挂1档
加油起步调速速度使车对着库中间走
要到中杆时向中杆靠同时踩停
打一圈方向看左右后边的距离
挂倒档
加油起步调速度看左库边回方向
看中杆使后镜不要擦着杆出去看下左右两边距离
仪表盘边缘离黄色底线有两手常宽时打死方向
看远方估计车要正时回正停。
二倒同上只要后镜入库停



侧方停车：
车中出风口对着边线直走
看后镜使车离边线一手掌宽
挂倒档
加油抬离合松刹车起步调速度要慢
看右后镜直倒
看左边地面井盖底刚到门柱时打死方向
看右后镜车尾对到库角时回一圈半
看左后镜车尾对到第二根虚线回一圈
看右前视镜车前角玻璃边对到库角打死方向
车正停同时回一圈方向
打左转向
打死方向
数12345
加油起步调速度
看左边线车顺着走
看右后镜使车不压库角



单边桥：
左脚正对左桥将车摆正
要上桥时看左前镜使车身刚盖桥走
看不到桥时看远方
看两桥二分之一使车直线行驶
到中点后打一圈连四分之一方向即在手在上
右脚对到桥时回二圈连四分之一即右手在上
看远方车要正时回方向使出风口边顺着桥外侧走
看右前镜使车身盖着桥走
后同左桥


直角转弯：
车中出风口对着边线走
看右后镜修方向
看左边直角刚过车门中点打死方向
看左后镜使车不压直角



起伏路：压饼：限宽门：
车靠左边一档怠速通过
后轮刚过车往左边靠行驶
估计车与12号饼成一线时回方向回正
右脚对着饼的中间偏右直走
靠边同时看第三饼
当第三饼离仪表盘边二手掌宽打二圈（死）方向
估计饼中心到右脚时回二圈回正
直走靠边同时看第四饼
当第四饼离窗底边一手掌宽打二圈（死）方向
右脚对着饼的中间回二圈方向回正直走靠边同时看第五饼
当门角对着饼时打二圈（死）方向 
估计饼中心到右脚时回二圈回正直走靠边同时看第六饼 
当第六饼离窗底边一手掌宽打方向
右脚对着饼边回二圈方向回正直走二钞往左边靠
看右后镜
车正加油到底
看左限宽门使后镜挨着不擦到门走
看后镜杆到车中打方向摆车
后同



坡道起步：

左脚对着停字人旁哪竖直行
调速度看到杆刚要到后镜踩离合踩停使杆刚挨着窗角
打转向
拉手刹
加油
抬离合
声音变稳离合
松手刹
加油
车不动松一点点离合



模拟雨雾、湿滑：
左手雨刮右手应急雾灯
听到语音
开雨刮（往下拉）同时开应急雾灯
加点油稳到
听到雨音松油
车头刚到最后喷水器关雨刮同时关应急雾灯



隧道：
左手喇叭右手大灯
听到语音开灯同时按喇叭时间长点
车头到标识牌
关灯按喇叭

山区：
听到语音按喇叭时间长点
加点油

调头：
车中出风口对到边线直行
听到语音打死方向
看左边底线要到门柱踩停
打死方向
挂倒档
加油抬离合松刹车起步调速度
看右边后镜
看左边底线刚到窗底线踩停
打死方向
挂1档
加油抬离合松刹车起步调速度
看右边底线要到椅背时踩停
打死方向
挂倒档
加油抬离合松刹车起步调速度
看左边后镜
看底线刚到仪表盘中间踩停
打死方向
挂1档
加油抬离合松刹车起步调速度出去


曲线：
将车正对着入口摆正靠中进入
右外边线刚到仪表盘中间时打一圈
 看左后镜慢打方向使左边线与车身一手掌宽
看右边线在仪表盘的位置保持  
看左后镜车身边线距离修方向保持一手掌宽
左边线要到左脚时打方向
看左前镜使左边线顺着雨刮器座走
看右后镜使左边线与车身一手掌宽
看雨刮器座看右后镜
保持

高速：故障：
听到语音将车停到收费站杆后不要超过杆
挂二档起步
加三档稳油门
听到语音加油到底
人过100标识牌丢油门稳油门
听到语音打右转向
数123
进库摆正踩停
拉手刹
打应急 
摘档
解安全
开门
头伸出去缩回
关门
系安全
关应急
打转向
数123
挂档
松手刹
加油起步
========路考=========================
准备：
上车将身份交给考官，
考官将身份证还给你下车，
往后绕车一圈后上车，
调后镜椅橙后镱，
系安全带，

脚放在离合不要超过去10秒
过路口不要超20码
打转向手一直扶着


起步：
打转向
挂二档
松手刹
加油抬离合松刹车起步

直线行驶：
稳方向只能小修

会车：
松油门向右打半圈回一圈

通过过路口左转弯：
松油门

加减档：

超车：

调头：
往前走点一次转过左手扶着转向开关

通过路口：

减速通过

通过学校区域：
减速通过

靠边停车：
看前视镜
车边盖线或留点空隙
=====================


汽车驾驶节能操作规范

发布日期：2017-09-13 文章来源：江苏交通学习网

江苏省质量技术监督局 发布

前  言

本标准是对JT/T807-2011《汽车驾驶节能操作规范》的完善与补充, 与JT/T807-2011相比，增加了“怠速、空挡滑行和带挡滑行”的定义、特殊道路驾驶节能操作要求、客车驾驶节能附加操作规范、货车驾驶节能附加操作规范等内容，修改了出车前检查、发动机起动、车速控制等条款。

本标准按照GB/T 1.1-2009《标准化工作导则  第1部分：标准的结构和编写》给出的规则起草。

本标准由江苏省交通运输厅运输管理局提出并归口。

本标准起草单位：江苏省交通运输厅运输管理局、交通运输部公路科学研究院。

本标准主要起草人：汪学君、蔡凤田、殷国祥、顾敏、刘莉、曾诚、钟田堂、俞伟民、李训东、万俊、阳冬波。

汽车驾驶节能操作规范

1　范围

本标准规定了汽车驾驶节能操作的术语和定义、汽车驾驶节能通用操作规范、客车驾驶节能附加操作规范、货车驾驶节能附加操作规范。

本标准适用于汽油、柴油发动机汽车的驾驶节能操作。

2　规范性引用文件

下列文件对于本文件的应用是必不可少的。凡是注日期的引用文件，仅所注日期的版本适用于本文件。凡是不注日期的引用文件，其最新版本（包括所有的修改单）适用于本文件。

GB/T 18344   汽车维护、检测、诊断技术规范

3　术语和定义

下列术语和定义适用于本文件。

3.1

常温起动  Room temperature start

环境温度高于5℃且发动机冷却液温度低于40℃时起动发动机。

3.2

热起动  Hot start

发动机冷却液温度在40℃以上起动发动机。

3.3

冷起动  Cold start

发动机冷却液温度低于5℃时起动发动机。

3.4

半联动  Semi-linkage

离合器不稳定接合的工作状态，即驾驶人松抬离合器踏板，使离合器主动盘与从动盘接合并处于相对滑动的状态。

3.5

怠速  Idle speed

变速器操纵杆置于空挡位置，完全松抬加速踏板，发动机对外无功率输出并能保持较低转速的稳定工况。

3.6

空挡滑行  Gliding in neutral

在汽车行驶中，驾驶人完全松抬加速踏板，将变速器操纵杆置于空挡位置，发动机与传动系统分离，利用车辆惯性行驶的运行状态。

3.7

带挡滑行  Gliding with transmission in gear

在汽车行驶中，驾驶人完全松抬加速踏板，将变速器操纵杆置于某前进挡位，发动机与传动系统保持接合，利用车辆惯性行驶的运行状态。

4　汽车驾驶节能通用操作规范

4.1　行车前准备

4.1.1　情绪调整

暂不考虑对情绪有较大刺激的事情，调整情绪处于心平气和、理解他人、不争不抢的状态。

4.1.2　行车路线设计

4.1.2.1　城市行车，设计行车路线应以行驶时间及距离最优为原则，尽量错开车流高峰时段，避开繁华街道、学校、医院、平交路口等交通拥堵路段。

4.1.2.2　长途行车，设计行车路线应以选择公路等级高及距离短为原则，并有备用行车路线。

4.1.3　出车前检查

4.1.3.1　检查车身外表及部件的状况：无漏油、漏水、漏气等现象；灯光、刮水器、除霜器完好；轮胎无损坏、无夹杂物、气压正常；备胎、随车工具、危险警告标志齐全完好。

4.1.3.2　检查发动机风扇、空调压缩机、水泵、发电机等传动带，张紧力合适，无老化、龟裂、翻毛边等现象；检查发动机冷却液、润滑油液面高度符合规定范围；检查离合器、制动器、转向器等机构的液面高度符合规定范围。

4.1.3.3　清除车厢内不必要的物品。

4.1.3.4　清洁车窗玻璃、车内外后视镜。

4.1.3.5　检查转向机构、离合器踏板、制动踏板，自由行程应正常。

4.1.3.6　检查驻车制动器操纵机构，工作应正常。

4.1.3.7　起动发动机后，仪表板无故障报警信号，车辆无漏油、漏水、漏气现象。

4.2　驾驶操作

4.2.1　发动机起动

4.2.1.1　配置手动变速器、汽油发动机的车辆，发动机起动时，将变速器操纵杆置于空挡位置，踩下离合器踏板，打开点火开关至起动位置，发动机顺利起动后立即松开，点火开关在起动位置的时间不应超过5s，起动过程中不应踩加速踏板。如果一次起动未能成功，应间隔10s（柴油发动机15s）后再次起动；两次起动不成功时，应进行检查，排除故障。

4.2.1.2　配置自动变速器、汽油发动机的车辆，发动机起动时，自动变速器挡位置于“P”挡或“N”挡位置，踩下制动踏板，其余操作方法同4.2.1.1。

4.2.1.3　柴油发动机常温及热起动时，操作方法同4.2.1.1或4.2.1.2；冷起动时，应首先开启发动机预热系统，在充分预热后再按4.2.1.1或4.2.1.2进行起动操作。对于国III以上柴油发动机，应打开点火开关，经5s～10s的系统自检后，再行起动。

4.2.2　车辆预热

4.2.2.1　发动机预热

4.2.2.1.1　非增压发动机起动后，保持发动机怠速运转1min（增压发动机怠速运转时间适当延长）。

4.2.2.1.2　在冬季温度较低时，保持发动机怠速运转至发动机冷却液温度达到40℃左右。

4.2.2.2　底盘预热

在发动机预热、汽车起步后，先以较低挡位、20km/h～40km/h速度行驶1km～2km后，再以正常速度行驶。在冬季温度较低时，低速行驶的距离应适当延长至3km～4km。

气压制动的汽车应在储气罐内的气压达到规定值（见汽车用户手册）后，再按4.2.2.2操作。起步后，行驶20m左右制动，检查气压制动系统有无泄漏。

4.2.3　起步

4.2.3.1　手动变速器汽车平路起步步骤如下：

a）左脚完全踩下离合器踏板，将变速器操纵杆置于“1”挡（部分大型车辆轻载时，可置于“2”挡）；

b）松开驻车制动，左脚先稍快松抬离合器踏板，待离合器处于半联动位置时（传动机件稍有振抖、发动机声音略有变化），右脚轻踩加速踏板，同时左脚再缓抬离合器踏板，直至汽车平稳起步后，左脚移离离合器踏板。

4.2.3.2　手动变速器汽车上坡起步步骤如下：

a）左脚完全踩下离合器踏板，将变速器操纵杆置于“1”挡；

b）拉紧驻车制动，右脚轻踩加速踏板提高发动机转速（坡度越大，需提高的转速越高），这时松抬离合器踏板到半联动位置；

c）当听到发动机声音发生变化时缓缓放松驻车制动，同时逐渐踩下加速踏板和缓抬离合器踏板，直至汽车平稳起步后，左脚移离离合器踏板。

4.2.3.3　手动变速器汽车下坡起步步骤如下：

a) 左脚完全踩下离合器踏板，将变速器操作杆置于“1”挡（坡度较缓时，变速器操作杆可置于“2”挡）；

b) 右脚踩制动踏板，同时松开驻车制动；

c) 左脚缓抬离合器踏板，同时右脚踩制动踏板控制速度（坡度越大，踩制动踏板的力越大），直至汽车平稳起步后，左脚移离离合器踏板。

4.2.4　换挡变速

4.2.4.1　手动换挡以根据发动机运行的经济转速（一般汽油发动机转速为2000r/min ～2500r/min；柴油发动机转速为1200 r/min～1500r/min）选择挡位为原则，并遵循以下原则：

a）尽量选择高挡位，使发动机在经济转速区域内的较低转速下运转；

b）发动机的转速高于经济转速区域时，及时选择升挡；

c）发动机的转速低于经济转速区域时，迅速选择降挡。

4.2.4.2　手动换挡时，应动作迅速，减少空挡转速损失，并遵循以下原则：

a) 汽车换挡变速踩下离合器踏板时，应及时抬起加速踏板；当抬起离合器踏板，离合器尚未完全接合时，不应急踩、猛踩加速踏板。

b) 升挡时，应自低挡位逐级换入高挡位，做到及时、准确。

c) 降挡时，应自高挡位换入预期行驶速度的、且能保持发动机转速在经济区域内较低转速下运转的低挡，做到及时、准确。

4.2.5　加速

4.2.5.1　加速踏板的位置遵循以下原则：

a) 汽车在平路行驶过程中，踩下加速踏板的最大限度应不超过加速踏板最大行程的3/4。

b) 汽车在上坡道路行驶过程中加速，如果已踩下加速踏板最大行程的3/4而发动机转速不能相应增加，应迅速变换低一级挡位后重新加速行驶。

4.2.5.2　踩下加速踏板的速度，以发动机的声音增高较柔和、转速平稳增加为宜。加速踏板由初始位置踩至3/4行程位置的时间应控制在3s～4s左右。

4.2.5.3　以下路况不得加速，确保安全：交叉路口、学校、人行横道、公共汽车站、弯道及其他视线不清的交通路况。

4.2.6　减速

4.2.6.1　行车中，应利用汽车带挡滑行减速，不得空挡滑行。

4.2.6.2　遇以下情况时，驾驶人应抬起加速踏板，依靠发动机对汽车的阻滞力减速滑行，必要时用行车制动器制动增加减速强度：

a) 预见前方有障碍物、红灯需要减速时；

b) 通过弯道、桥梁、交叉路口和坑洼路面时；

c) 通过坡度小于5%且路面较宽的下坡道；

d) 下陡坡接近平路的坡尾路段；

e) 对向车道有来车，需要会车时；

f) 通过车流、行人较多的交通繁忙地区或路旁集市；

g) 在预定停车地点适当距离之前，采用减速准备停车。

4.2.6.3　汽车行驶在长而陡的下坡道时，抬起加速踏板，离合器保持接合状态，发动机不熄火，变速器操纵杆置于合适的挡位（坡度越大，挂挡位越低），并根据速度情况使用行车制动器间歇制动控制车速。安装有缓速器的车辆，应充分利用缓速器减速。

4.2.7　车速控制

4.2.7.1　汽车在正常行驶时，变速器应尽量置于最高挡位，保持在发动机经济转速区域内较低转速下等速行驶。

4.2.7.2　当汽车行驶阻力增大，以及交通繁杂，应根据行车速度及时换入合适挡位。

4.2.7.3　在预定速度下，应保持好该状态时的加速踏板位置，使汽车等速行驶，尽量避免加速踏板位置来回变化。

4.2.7.4　在普通公路上，跟车距离一般应大于汽车2s～3s内驶过的距离；在高速公路上，跟车距离一般应大于汽车4s内驶过的距离。

4.2.7.5　汽车行驶的速度不应超过道路通行的有关限速规定。

4.2.8　转向控制

4.2.8.1　操纵汽车转向时应平顺，提前50m～150m开启转向灯，避免突然变向或急转弯等。

4.2.8.2　在汽车行驶过程中，尽量保持直线行驶，避免频繁变更车道或来回转动转向盘。

4.2.8.3　变更车道时，应在确认与前后左右的汽车处在安全距离的情况下，提前开启转向灯，夜间应变换使用远、近光灯，然后平稳地转动转向盘以较大的行车轨迹缓加速驶向另一车道。

4.2.9　会车

在无中央隔离装置道路会车时，应预先选择会车地点，提前降低车速，注意礼让。

4.2.10　典型路段驾驶

4.2.10.1　上坡路段驾驶遵循以下原则：

a) 遇见坡路时，应提前预测坡度、坡长，判断需用的挡位及速度，在坡前500m处应轻微加速，在坡路时保持加速踏板位置，尽量靠汽车惯性冲到坡顶。

b) 重载上陡坡时，应提前换入低挡位，避免中途换挡。

c) 当发动机提供的动力不足时，应迅速降挡，保持发动机动力上坡，避免坡路途中停车或熄火。

4.2.10.2　隧道驾驶遵循以下原则：

a) 在距隧道入口100m左右处，应提前减速，开启前照灯、示廓灯，仔细观察前方情况。

b) 在隧道内行驶时，应保持合适的跟车距离和行驶速度。

c) 在隧道出口前，应握稳转向盘，避免隧道出口处的横向风引起汽车偏离行驶路线。

d) 驶入和驶出隧道时，在明、暗适应过程中不应加速行驶。

4.2.10.3　城市拥挤路段驾驶遵循以下原则：

a) 在拥挤路段，汽车处于频繁的起步—停车的循环行驶状态，起步时应缓踩加速踏板，起步后尽员可能利用汽车惯性滑行行驶，避免起步后猛踩加速踏板再制动停车的驾驶方式。

b) 在汽车安全行驶的前提下，应减少完全停车，尽量使汽车保持一定的运动惯性。

4.2.10.4　高速公路驾驶遵循以下原则：

a) 在高速公路上尽可能保持经济车速等速行驶。

b) 在接近高速公路收费站或出口处，应提前抬起加速踏板，充分利用带挡滑行减速。

4.2.10.5　乡村道路驾驶遵循以下原则：

在泥泞道路行驶时，应选用低挡位，尽量保持车辆低速直线行驶，转向不可过急、过猛。

4.2.11　行车温度控制

4.2.11.1　发动机冷却液温度低于40℃时，不应使发动机大负荷高速运转或使汽车高速行驶，温度达到40℃以上时开始正常行驶。

4.2.11.2　应使发动机冷却液温度保持在80℃～95℃。长时间上坡或高速行驶等行驶状态下发动机冷却液温度报警时，应停车怠速或小负荷、低速行驶，使发动机冷却液温度慢慢降到正常区域。

4.2.12　发动机熄火

4.2.12.1　当汽车停止行驶后，应尽量减少发动机怠速空转，及时使发动机熄火。

4.2.12.2　非增压发动机汽车在路口停车等待通过的过程中，应根据交通信号灯计时器判断停车时间，停车时间超过60s的，应将发动机熄火。

4.2.12.3　非增压发动机汽车在上下乘客、装卸货物等需要停车超过60s时，应将发动机熄火。

4.2.12.4　非增压发动机汽车经过高速或爬长坡行驶后发动机冷却液温度很高时，应怠速运转30s以上后熄火。

4.2.12.5　增压发动机汽车在高速行车后不应立即熄火，应保持发动机怠速运转3min以上，再熄火。

4.2.13　行车中检查

4.2.13.1　在行驶过程中应经常注意查看车上各种仪表，查听发动机及底盘声音，如发觉操纵困难、车身跳动或颤抖、机件有异响或有异常气味、冷却液温度异常时，应立即停车检查并进行必要的调整和修理。

4.2.13.2　行驶中发动机动力突然下降，应立即停车检查冷却液或润滑油量（冷却液温度高时不能打开水箱盖）。

4.2.13.3　行驶中转向盘的操纵变得沉重并偏向一侧，应立即停车检查轮胎气压。

4.2.13.4　检查冷却液和润滑油量，应无漏水、漏油，气压制动应无漏气现象。

4.2.13.5　检查车轮制动器，应无拖滞、发热现象，驻车制动器作用可靠。

4.2.13.6　检查转向、制动装置和传动轴、轮胎、悬架等各连接部位，应牢固可靠。

4.2.14　停车

4.2.14.1　手动换挡汽车短时间停车时，将变速器操纵杆置于空挡，右脚踩住制动踏板；停车时间过长时，应将发动机熄火，将变速器操纵杆置于“1”挡（下坡路段停车时，应将变速器操纵杆置入“R”挡），并拉紧驻车制动。

4.2.14.2　准确判断停车位置，应做到一次停车到位，减少停车时的移车次数。

4.2.14.3　避免在上坡、积水、结冰或松软的路段上停车。

4.2.14.4　冬季中途停车时，应尽量避免汽车发动机迎风停放。

4.2.15　收车后检查

4.2.15.1　检查汽车，应无漏油、漏液、漏气现象，视需要补充燃油、润滑油和冷却液。

4.2.15.2　检查轮胎，气压应符合要求，胎间及表面无杂物及损伤。

4.2.15.3　检查风扇等的传动带，应完好且松紧度合适。

4.2.15.4　检查轮胎螺母和半轴螺母，应无松动。

4.2.15.5　打扫车厢和驾驶室，清洗底盘和清洁整车外表，同时查看各部位，应无破损。

4.2.15.6　汽车每行驶1000km时，应清除空气滤清器的灰尘。

4.2.15.7　高温天气下，应将车辆停放在阴凉处或车库内，或者在车窗上放置遮阴、热反射装置，防止阳光的直射升温。在寒冷天气，汽车长时间停驶时，为防止轮胎被冻住影响正常起步，必须在轮胎下面垫木板或砂子等物。

4.3　汽车燃润料、轮胎的使用及日常维护

4.3.1　车辆运行材料的合理选用

4.3.1.1　燃油

a) 油箱液面不应过低，燃油加注不应过多。当使用到油表显示还剩下不到1/4 的燃油时加油，每次加油至油表刻度的2/3～4/5 为宜。

b) 应参考车辆用户手册选择燃油的牌号，柴油车一般以最低使用温度略高于柴油的冷凝点4℃～

6℃为宜。

4.3.1.2　润滑油

a) 按车辆用户手册上的要求及时添加、更换润滑油。

b) 冬季宜使用低黏度的润滑油，夏季宜选用黏度稍高的润滑油，条件许可时宜选用多级润滑油。应根据季节变换，及时更换润滑油。

4.3.2　合理使用轮胎

4.3.2.1　宜选用子午线轮胎，轮胎胎面不宜过宽。

4.3.2.2　应定期进行轮胎换位。

4.3.2.3　出现轮胎花纹磨损超标时，应及时更换轮胎。

4.3.2.4　轮胎更换或者车轮有振动感时，应进行轮胎动平衡检查。

4.3.2.5　定期检查并校正车轮定位参数。

4.3.3　定期维护车辆

4.3.3.1　根据行驶里程或使用时间，按GB/T 18344的要求对车辆实施定期维护。

4.3.3.2　应定期清除进气系统的积碳。

4.3.3.3　应保持排气系统良好的工作状态。

4.3.3.4　应检查并保持制动系统良好的工作状态。

5　客车驾驶节能附加操作规范

5.1　行车前检查

行车前，检查行李舱内行李，应摆放均匀。

5.2　起步前检查

起步前，检查乘客人数，避免二次起步。

5.3　空调使用

5.3.1　使用空调时应关闭车窗，空调制冷温度应设定在26℃。

5.3.2　发动机运行平稳后再开启空调。客车上客前10min左右开启空调，下客后应及时关闭空调。

5.3.3　汽车在烈日下停放导致车内温度较高时，应先打开车窗，保持低速行驶，待车内空气温度降低后，再关闭车窗，开启空调。

5.3.4　空调出风口不应堆放杂物或悬挂物，不应在怠速状态下长时间使用空调，避免设置制冷温度过低而风量过小。

5.3.5　空调冷凝器和蒸发器表面、回风窗滤网、出风口等应保持清洁。

6　货车驾驶节能附加操作规范

6.1　厢式货车或集装箱专用运输车辆应装配导流罩等节能装置。

6.2　应根据装载容量、行驶路线、道路条件等选择合适的车型。

6.3　应根据道路和桥梁的通行能力，选择适合的路线。

6.4　当车辆以低于70km/h的速度行驶时，可开窗通风或使用空调的通风功能；当车辆以高于70km/h的速度行驶时，应关闭车窗并开启空调，空调制冷温度应设定在26℃。

6.5　装载时应使货物载重量均匀地分布于载货平面，且沿车辆纵向中心线均衡顺装，较重的物件应放置于载货平面的中部。

6.6　货物装载不得超高、超宽。

6.7　货物捆绑、固定应牢固，覆盖应严实。在行驶途中应经常检查货物捆绑、固定、覆盖状况。




======================

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(1)：基础知识

发表于2015/2/21 23:45:20  2579人阅读

分类： android

讨论QQ群：304570451(仅接受各开发组成员，各论坛开发者，广告、推销者勿扰)

这一篇是这一系列文章的起始，就暂不进入正题，先啰嗦一下一些基本的常识和一些题外话吧，这些知识也挺重要的，建议急性子的读者也多了解一下。

声明：本系列文章并非百科全书，笔者也不指望靠这些文章就能把一个初学适配者指导成一个高手，所以请读者碰到问题时请多动手尝试。

一、目的

写这一系列文章的目的，是为了总结出一种通用的方法，一种门槛不高，且不需要很深的编程基础，适用于大众的编译适配方法；使用这种方法，可以为各种基于高通msm8960平台的手机，编译适配出msm-aosp。

二、Android版本

4.4即kitkat是目前比较稳定的版本，也被大部分android手机所支持，所以笔者本系列文章专门针对此版本。但有些经验、方法总是共通的，其它的版本的系统甚至cm的编译适配也可以部分地参考本系列文章。

三、Rom的分类

虽然aosp是原生系统，但相对于官方系统来说，也属于第三方系统的范畴。 
总之除了官方rom、基于官方优化(汉化)的rom以外，其它种类的rom都属于第三方rom。 
而第三方rom按照其产生的方式仍然可以再分类：编译，插桩，移植 
那么一共就有4个分类 
优化：指的是修改优化官方rom(包括汉化) 
编译：指的是从源代码编译出来的rom 
插桩：指的是用代码插桩的方法适配出来的rom，一般使用patchrom系统 
移植：指的是从相近配置机型的rom以及本机型的底包rom中获取资源，通过文件替换的方式，产生的rom

四、Rommer的分类

笔者暂且按照rom的分类把rommer也分为优化者、编译者、插桩者、移植者。 
但并没有严格的阵营或界限，毕竟一个rommer可能做同时编译、插桩、移植、优化。 
优化者就不多说了，一般接触android都是从优化系统（汉化、修改）开始，这本身就是基础，即使是适配高手，优化的手段也都必须掌握。 
由于miui、乐蛙、百度等这些插桩型或移植型rom在国内的流行，所以国内的插桩者、移植者众多，相反国外的插桩者却不多，这是由国内的android生态圈所决定的。 
而android open source(现在已经墙了），github(访问巨慢无比)，XDA(也是慢而且还广告满天飞)，这些优秀的开源站或开源社区都在国外，于是诞生了cm、aokp等众多第三方rom，也就催生了许多国外的编译者，相反的国内的编译适配者屈指可数，这也是由国外的大环境所决定的。

五、google-aosp与高通的msm-aosp，这二者的关系

笔者所了解的，都是从代码以及rom中了解进而总结出来的，并不是搜索或从书里得来的。如果说得不对也请见谅！ 
Google作为业界大佬同时也是android项目的主导者，它的aosp开源项目就是所有android的源头，即所有的andriod版本都是从google-aosp中分化演进而来，包括高通的msm-aosp。 
至于为何笔者把高通的aosp当做一个相对独立的aosp系统呢？因为高通的cpu架构以及显示芯片Adreno、多媒体部分与google的标准存在差异，所以google的aosp代码不能直接用在高通平台。 
于是高通就把google的aosp的代码同步回去，经过修改（硬件抽象层、系统框架、通讯层），形成自己的版本，也就是msm-aosp。那么反过来，大佬google却不会从高通这边同步代码回去来适应高通的平台，毕竟google要坚持自己的标准，三星、德仪、MTK、麒麟等平台还是遵循google的标准的(未经过求证，只是笔者的猜想)。

六、非caf内核与caf内核

高通的开源社区叫做Code Aurora Forum，缩写就是caf。 
高通平台cpu用的内核一般就叫caf内核。 
一般情况下除了nexus系列手机以外，都是caf内核。 
那么谨记，msm-aosp必须配合caf内核，而非caf内核则可用于google aosp。 
OK，那么聪明的读者应该会想到，CM等第三方rom的编译系统既可以适配出caf内核的系统也可以适用于非caf内核，到底有什么诀窍呢？ 
因为cm集成了google和高通两者的硬件抽象层代码。 
举个例子(msm8960平台)： 
cm的hardware/qcom/display对应于google-aosp的hardware/qcom/display 
cm的hardware/qcom/audio对应于google-aosp的hardware/qcom/display 
cm的hardware/qcom/media对应于google-aosp的hardware/qcom/display 
而 
cm的hardware/qcom/display-caf对应于msm-aosp的hardware/qcom/display 
cm的hardware/qcom/audio-caf对应于msm-aosp的hardware/qcom/display 
cm的hardware/qcom/media-caf对应于msm-aosp的hardware/qcom/display

七、代码的版本revision与tag

这里所说的版本，并不是能看到的版本，比如android4.4.2或kernel 3.4这之类的版本 
而是指代码的版本，读者必须逐渐适应这个说法。 
android是有许许多多个代码目录组成，这些目录都是一个个独立的项目，可能有多个不同的开发人员负责维护，而单个项目每次提交更新会形成一个版本。 
而这些项目处于不断更新的状态，可能多个项目积累了几百次几千次的更新，才会形成一个大版本的跃进。 
那么每次编译比如4.4.2时，可能同一个项目的代码版本并不一样，因为之前说了项目一直在更新，于是很有必要使用代码版本的概念，对于git来讲，就是revision，每一次通过测试的编译，都把每个项目的revision记下来，众多项目形成一个tag。典型且容易理解的来讲，就类似cm的snapshot，比如CM11-M4，CM11-M5这样的版本。 
但高通则更为复杂一些，高通的开源站把通过release测试的tag版本都公布在这里： 
https://www.codeaurora.org/xwiki/bin/QAEP/release 
各种平台独立，且有一定的命名规律。

为了让读者能更直观的理解，下面的例子就是某个版本的tag，打开后可以看到各项目的 revison： 
￼

再举一个例子：msm8974平台的release tag，笔者列出了每个tag对应的android版本代号，其中KOT49H代表4.4.2_r1，KVT49L代表4.4.2_r2，KTU84L代表4.4.3，KTU84P代表4.4.4

tag版本android版本LNX.LA.3.5.1-01710-8x74.0.xmlKOT49HLNX.LA.3.5.1-01710-8x74.0.xmlKOT49HLNX.LA.3.5.1-02010-8x74.0.xmlKVT49LLNX.LA.3.5.1-02410-8x74.0.xmlKVT49LLNX.LA.3.5.1-02710-8x74.0.xmlKVT49LLNX.LA.3.5.1-03010-8x74.0.xmlKVT49LLNX.LA.3.5.1-03310-8x74.0.xmlKVT49LLNX.LA.3.5.1-03910-8x74.0.xmlKVT49LLNX.LA.3.5.1-04210-8x74.0.xmlKVT49LLNX.LA.3.5.1-04510-8x74.0.xmlKVT49LLNX.LA.3.5.1-05110-8x74.0.xmlKVT49LLNX.LA.3.5.1-05210-8x74.0.xmlKVT49LLNX.LA.3.5.1-05510-8x74.0.xmlKVT49LLNX.LA.3.5.1-05710-8x74.0.xmlKVT49LLNX.LA.3.5.1-05910-8x74.0.xmlKVT49LLNX.LA.3.5.1-06110-8x74.0.xmlKTU84LLNX.LA.3.5.1-06210-8x74.0.xmlKTU84LLNX.LA.3.5.1-06310-8x74.0.xmlKTU84LLNX.LA.3.5.1-06510-8x74.0.xmlKTU84PLNX.LA.3.5.1-06810-8x74.0.xmlKTU84PLNX.LA.3.5.1-06910-8x74.0.xmlKTU84PLNX.LA.3.5.1-07010-8x74.0.xmlKTU84PLNX.LA.3.5.1-07410-8x74.0.xmlKTU84PLNX.LA.3.5.1-07510-8x74.0.xmlKTU84PLNX.LA.3.5.1-07710-8x74.0.xmlKTU84PLNX.LA.3.5.1-07910-8x74.0.xmlKTU84PLNX.LA.3.5.1-08610-8x74.0.xmlKTU84PLNX.LA.3.5.1-08810-8x74.0.xmlKTU84PLNX.LA.3.5.1-09010-8x74.0.xmlKTU84PLNX.LA.3.5.1-09110-8x74.0.xmlKTU84P

从上面的例子可以看出，并非每个tag都是一个跨越式的版本升级，有些升级只是修复bug等。所以许多代码版本是升级了，但实际上android版本并没有变化。

八、最后的重点

请务必看完并理解此段的含义。 
一般情况下，通过tag同步下来的系统代码版本以时间为联系是统一的，唯有内核代码除外，因为手机的内核代码由手机厂商单独发布。 
如果内核代码的版本与系统代码的版本不匹配，那么编译就会出错，甚至编译出来的系统无法使用。 
那么经过思考，我们可以得出如下结论： 
方法一：要么固定系统代码版本，寻找匹配的内核代码版本 
方法二：要么固定内核代码版本，寻找对应的系统代码版本

对于方法一，如果同步了最新的系统代码，然后把厂商提供的内核代码也升级到最新的版本，那么这样就可以配合最新的系统代码，编译适配出完整ROM了。 
但这个门槛太高，因为能看懂内核代码能编程，需要经过系统的学习，并非几篇文章就能教会，而本文所讨论的则是通用的，低门槛的方法。

所以剩下只有方法二：识别内核代码的版本，再找到对应匹配的系统代码的版本(可能不是最新的)，再来做编译适配。虽然这种方法限制很大，但确实是适合大众的方法。 
那么如果我们有了厂商的内核代码，那么该如何找到匹配的系统代码呢？这个问题由之后的文章来解答。

那么，如何升级内核以适配出高版本的系统？ 
升级内核确实有一定的方法(后面的文章会阐述笔者总结的思路)，但如前所述，方法能总结出来，但编程技能无法靠几篇文章就能教会。 
反过来讲，如果一个高手能看懂、修改、编写内核代码，那么适配系统当然得心应手，不会拘泥于用什么方法。就像武侠小说里讲的，内功高手无所谓用什么招式，只有初学者才需要学招式






CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(2)：开发环境及相关的使用技巧

发表于2015/2/22 0:11:04  1784人阅读

分类： android

因为面对的是新手，这篇文章可能讲得比较宽泛，包括了硬件的选用，系统的选用，是否该用虚拟机，如何配置linux，linux的一些使用技巧，调试环境的搭建，脚本、工具的制作等等。

一、硬件

因为系统和内核的源代码是以千万行乃至亿行代码来算，所以同一台计算机完整编译一次系统的时间，可比插桩要来得多得多，想提升编译的效率，即降低编译所花的时间，拥有一台高配置电脑必不可少。 
在ram即内存足够的前提下，cpu速度起决定性作用，硬盘速度也十分重要；编译速度取决于cpu线程数&cpu单线程性能&硬盘速度 
所以多线程高性能的cpu+ssd可以大幅降低编译所花的时间。 
我自己的例子： 
i3-2350M主频2.3G，内存10G，2核心4线程，linux安装于ssd，编译时使用5个线程，总共需要约4个小时才能完成编译 
i7-4770主频3.4G，内存16G，4核心8线程，linux安装于ssd，编译时使用9个线程，总共只需要约40分钟即可完成编译 
这可是节省了3/4的编译时间(虽然编译只是适配的一部分，编译后的调试也很花时间)，因为从零开始编译适配需要多次重复编译，所以往往要花1个月甚至更多的时间，那么高配置的计算机节省下来的编译时间就非常可观。 
假如进行了100次编译，那么高性能计算机就可以为你节省300小时，即12.5天 
有句话说得好，能用钱解决的事都不叫做事，如果有条件的话，当然I7+16GRAM+SSD是最理想的。 
达不到的话也没事，最多就是多花几倍时间罢了，只要有耐心和毅力，没什么搞不定的。

二、linux的选择与安装

linux开发环境的安装配置，这里就不多说了，blog里有其它好几篇文章专门介绍，选一个你喜欢的系统就行了，也不一定用最新的系统，老的系统稳定好用就行，当然笔者推荐Vm11.0+Mint17.1 XFCE/Mate这个组合(目前是最新的)。 
纯正的ubuntu笔者是不推荐的，众所周知，其默认桌面太反人类了。 
至于要不要用虚拟机，笔者有做过对比试验，linux都安装于ssd，真实机编译与虚拟机编译，差距不大。而虚拟机明显能让计算机的利用率更高，毕竟我们可以边编译边用windows来做些其它事情，而且windows下做后期的调试也十分适合，所以笔者推荐使用虚拟机。 
注意：Vmware请勾选CPU选项里的“虚拟化 Intel VT-x/EPT或 AMD-V/RVI”以提高虚拟机性能。

三、linux的一些使用技巧

1.让使用更方便

如果单纯只是用于编译，那么大可不必太过在乎安全权限等方面的问题，密码也可以尽量设置得简单，默认用户直接提升为root权限即可，用起来方便，不要给自己找麻烦。

2.VmwareTools一定要装，且要安装正确。

好处有2点，一是小文件可以直接复制粘贴，二是设置共享文件夹直接与windows沟通 
共享文件功能的使用方法这里简单介绍一下(前提是已经正确安装了VmwareTools)： 
在虚拟机设置的“选项”页面，“共享文件夹”项，启用并设置文件夹 
￼

然后在linux的/mnt/hgfs目录下就可以读写这些共享的文件夹 
￼

这样做有什么好处？ 
笔者的硬盘是由普通磁盘+SSD构成的，但SSD只有120G的空间，存放了linux的虚拟机文件后就没有空间了，所以实际上虚拟出来的linux磁盘空间只有108G(SSD得留一些空余安全空间)，而有了这个共享的功能，就相当于扩展了磁盘空间，一些无用的文件，可以通过tar、zip、7z等工具压缩一下存放在真实机windows的磁盘里。

3.如何在终端快捷地输入命令

笔者推荐的几款linux，在任意文件夹下都可以打开终端 
而输入命令，特别是一些长的文件夹名称时，怎么快捷地输入呢？ 
答案是tab键，linux有自动拼写的功能，会识别命令、文件、文件夹名称。 
举个例子，在源码目录下，要输入source build/envsetup.sh这个命令该怎么输入？ 
sou[按tab键]bu[按tab键]/e[按tab键] 
只要读者多试几次就能掌握诀窍了。 
注意：linux是大小写区分的。

4.如何查看剩余磁盘空间

df -h

5.如何存放文件，如何压缩解压文件

除了必须存放在用户目录的文件，笔者一般把文件存放在/opt/下，当然这个因人而异，读者建个新的文件夹保存也完全没有问题。 
这里举个例子，如何把存放于/opt/cm11-m12的文件夹压缩存放于共享目录下 
先在文件浏览器里打开/mnt/hgfs/AndroidOpenSource/CyanogenMod[这是笔者假设的目录] 
然后右键打开终端，请善用tab键 
7z a cm11-m12.7z /opt/cm11-m12 –mx=9 –v4096m 
这句命令的意思是，把/opt/cm11-m12压缩存放在当前目录，文件名为cm11-m12.7z，压缩率为9(最高)，每4G进行分卷

然后再举个例子，如何把共享目录里的压缩文件解压到/opt/ 
先在文件浏览器里打开/mnt/hgfs/AndroidOpenSource/CyanogenMod[这是笔者假设的目录] 
然后右键打开终端，请善用tab键 
7z x cm11-m12.7z –o/opt/

6.解释一下压缩命令的语法

7z压缩率最高，所以推荐使用7z格式 
7z压缩文件夹命令 
7z a name.7z /opt/xxx [-mx=9 -v2048m] 
方括号里的为可选项，mx代表压缩率0~9，v2048m表示每2G分卷，如果不输入就是默认压缩率且不分卷

7z解压文件命令 
7z x name.7z -o/opt/ 
解压文件到/opt/目录，-o后面没有空格

Zip压缩文件夹 
zip -r -9 –y name.zip /opt/xxx 
-r代表目录，-9代表压缩率，-y代表保存符号链接

Zip解压文件 
unzip -d /opt/ name.zip 
解压文件到/opt/目录，-d后面有空格

tar压缩文件 
tar zcvf name.tar.gz /opt/xxx 
把/opt/xxx压缩成.tar.gz格式

tar解压缩 
tar zxvf name.tar.gz –C /opt/ 
解压文件到/opt/目录，-C后面有空格

7.查找文件命令

例如在当前目录下查找文件名包含abc的文件 
find . –type f –name "*abc" 
-type f限定了只找文件，如果不输入这个选项则会查找文件与文件夹 
举几个实用的例子 
当repo同步代码中断的时候，会留下一些tmp垃圾文件，且不会自动清除，那么用find命令+xargs就可以方便的删除掉 
先查找一下这些文件 
find . –name "tmp_*"

再用如下命令删除 
find . –name "tmp_*" | xargs rm –rf

当同步完代码checkout出来后，读者可能会把代码移动保存到一个新的文件夹里，但每个目录里都有.git文件，如何把这些文件删掉呢？ 
先查找一下这些文件 
find -name '.git*'

再用如下命令删除 
find -name '.git*' |xargs rm –rf

注意：不要在含有.repo的文件夹里执行这个命令，会把同步好的.repo删掉 
笔者是把同步好的代码移到另一个空文件夹，然后在这个新的文件夹里执行这个命令的

8.查找关键字命令

有时我们会需要在一大堆文件里找含有关键字的语句，命令如下： 
grep –r "关键字"

四、调试环境的搭建

1.android开发工具(ADT Bundle)下载

谷歌把它叫做ADT Bundle，但实际上就是eclipse+adt插件而已，本质上还是eclipse。 
虽然我们不做开发，但eclipse的实时查看log功能还是很好用的，这点在我们后续调试rom时可以用到。 
google的android开发站点被墙了，这是国内的镜像站 
http://tools.android-studio.org/ 
读者得花时间研究一下这个站的说明，并且熟悉一下开发工具 
开发工具分为eclipse和android-studio，笔者觉得eclipse用来看log比较好，所以推荐这个 
下载ADT Bundle ADT Bundle包含了Eclipse、ADT插件和SDK Tools，是已经集成好的IDE，只需安装好Jdk即可开始开发，推荐初学者下载ADT Bundle，不用再折腾开发环境

请根据自己的windows操作系统版本来选择32位或64位下载地址。 
记得选择windows版的即可。

然后下载JDK(eclipse需要用) 
32位jdk-6u45-windows-i586.exe 
http://download.csdn.net/detail/benjaminwan/8452547

64位jdk-6u45-windows-x64.exe 
http://download.csdn.net/detail/benjaminwan/8452549

2.关于eclipse的汉化(对于英文达人，此步骤不是必须)

方法一：这个方法最方便，但网络不好的话要等很久 
打开eclipse 
Help->Install New Software 
Work with填入http://download.eclipse.org/technology/babel/update-site/R0.12.1/juno 
回车并等Pending，如果半小时列表还没出来，读者还是考虑其它方法吧 
如果列表出来了，选中所有中文语言包，然后接着安装即可

方法二：直接下载完整zip汉化包 
http://eclipse.org/downloads/download.php?file=/technology/babel/update-site/R0.12.1/babel-R0.12.1-juno.zip 
找国内的下载地址 
下载完成后，解压任意目录 
Help->Install New Software 
Work with填入上面解压的目录 
等Pending出来 
过滤器填Chinese (Simplified)，过滤的过程中会比较卡，等待 
每项展开全部选中xxxx in Chinese (Simplified) 
Next，非常慢，可能要等10分钟 
I accept -> Finish 
安装过程也很慢噢 
如果嫌慢，直接覆盖方法三汉化好的版本得了

方法三：直接下载笔者汉化好的eclipse覆盖 
链接: http://pan.baidu.com/s/1mgsra8C 密码: w3bq 
eclipse-chs_x64-20140702.rar 
笔者只能提供64位版本的，读者如果是32位系统那就只能自己想办法了。

3.如何使用eclipse来调试

打开eclipse后，选中“窗口”->“打开透视图”->DDMS 
当连上手机并开启调试后，就会是如下这个样子 
￼
左上角是进程列表，连上数据线且开了调试之后会显示 
右边是线程，右边的窗口暂时用不到，只有app开发才会用到 
重点是底下的窗口 
比如要看所有error，那么就把级别选到error

￼

有一个搜索过滤栏，比如缺lib的时候，就输入lib，那么含有lib关键字行的就会被快速过滤出来，那么缺哪个lib就能一下找到。 
￼

左侧还有一个预设的筛选条件 
可以预设几个关键字，比如选择wifi时，就会过滤出wifi相关的信息 
￼

如何截图？ 
￼
Devices窗口工具条里有个相机图标，先选中需要截图的设备，再点相机按钮即可

4.adb命令脚本

为了调试方便，免得老是手动输入adb命令，把相关的adb命令做成脚本。 
可以下载笔者制作好的：http://download.csdn.net/detail/benjaminwan/8452161 
或者读者自己制作，下面讲制作方法 
新建一个文件夹，名字就叫ADB_Command_Tools 
然后把上一步下载的开发工具的sdk\platform-tools\下的 
adb.exe 
AdbWinApi.dll 
AdbWinUsbApi.dll 
这3个文件复制到ADB_Command_Tools文件夹

然后把如下内容存为Tools.bat文件，也放在ADB_Command_Tools文件夹

@echo off title 启动临时Recovery / boot to temporarily Recovery color 0B :start cls echo. Adb Command Tools Made by benjaminwan 2015.2.10 echo. ┏━━━━━━━━━━━━━━━━━━━━━━┓ echo ┃1.重启系统 (adb reboot) ┃ echo. ┣━━━━━━━━━━━━━━━━━━━━━━┫ echo ┃2.重启至Recovery模式(adb reboot recovery) ┃ echo. ┣━━━━━━━━━━━━━━━━━━━━━━┫ echo ┃3.重启至Fastboot模式(adb reboot bootloader) ┃ echo. ┣━━━━━━━━━━━━━━━━━━━━━━┫ echo ┃4.以root用户调试 (adb root) debug编译才行┃ echo. ┣━━━━━━━━━━━━━━━━━━━━━━┫ echo ┃5.重新挂载分区读写 (adb remount) ┃ echo. ┗━━━━━━━━━━━━━━━━━━━━━━┛ set /p KEY= [您的选择是:] if %KEY% == 1 goto NO1 if %KEY% == 2 goto NO2 if %KEY% == 3 goto NO3 if %KEY% == 4 goto NO4 if %KEY% == 5 goto NO5 goto error :NO1 echo. echo. 正在重启 echo. adb reboot goto start :NO2 echo. echo. 重启至Recovery模式 echo. adb reboot recovery goto start :NO3 echo. echo. 正在重启至Fastboot模式 echo. adb reboot bootloader goto start :NO4 echo. echo. 以root用户调试 adb root pause goto start :NO5 echo. echo. 重新挂载分区读写 adb remount pause goto start :error echo. Input error,please retry! echo. 您输入有误，请重新输入! echo. 您輸入有誤，請重試! pause goto start123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566

运行后，就是如下界面 
￼

然后说明一下，adb root这个命令是编译android时选择debug编译才能使用的，用了这个命令相当于取得了root权限，无需su命令。 
在今后调试aosp时，我们可能还未集成supersu等root工具，就需要这个命令取得root权限，此点在后续的文章里就不再细讲。

5.lib传送工具

笔者制作的工具包：http://download.csdn.net/detail/benjaminwan/8452141 
按照工具包里的说明安装即可 
￼

这个工具主要用来把lib传送到手机的对应位置，在后续的调试缺lib时十分有用，读者也可以参考提供的资源自己制作一个类似的工具。

总结来讲，工具不是必须，但适配的毅力则是必须，没有工具和环境也照样能做适配，只不过艰苦一些 
不过当笔者刷机100次后才醒悟，没有工具和环境真的是折腾自己。

1 0




CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(3)：寻找正确的代码版本

发表于2015/2/22 0:27:55  2717人阅读

分类： android

实际上此篇才是适配旅程真正的起点，读者务必掌握此篇内容才能真正开始编译适配。

在第一篇基础知识里讲过，内核代码由厂商发布，系统代码网上可以同步得到。 
内核与系统这2者的代码版本必须相互配合，这就意味着只有2条路： 
方法一：内核版本不变，找对应的系统代码(可能不是最新的代码)； 
方法二：系统代码固定(取最新的)，手工升级厂商提供的内核代码以配合最新的系统代码(当然没有降级这种做法)。

基础知识里也讲过，如果能看懂、修改、编写内核代码，适配系统当然得心应手，也就无需遵循什么条条框框，可惜这个方法并不适用于大众。

本系列文章面向的是一般文化水平，可能无编程基础的普通人，所以只能选方法一，当然掌握了方法一，有一定基础的读者也可以更进一步，尝试升级内核的方法，此点会在此篇文章里稍微介绍。

注意：虽然本文面向一般大众，但笔者认为至少有代码插桩经验的rommer来尝试比较合适

一、找官方内核版本的技巧

MS8960平台找版本十分容易，但以下介绍的方法估计不能用于msm8974平台

方法1：log法

用官方系统即可，取从开机到进系统这段时间的log，并搜索“AU_LINUX_ANDROID”关键字

方法2：grep法

把官方rom解压到linux里，然后在system文件夹下打开终端，用命令搜索 
grep –r “AU_LINUX_ANDROID” 
如果是4.4系统，至少会搜索到2个lib，用ultraedit打开，然后仍然搜索关键字就能找到

二、依据内核版本找到对应的release tag

注意事项：高通的开源站点在国内(北京)设有分站，所以访问速度理应很快；但同一个域名在国外也有站点，如果你使用了google的dns服务器，那么会解析成国外地址，造成访问速度很慢；这里有一个方法来判断，先在linux下ping codeaurora.org，并记下ip地址，然后到这里查询此ip http://ip.chinaz.com/，如果显示地址为美国，那么读者需要修改真实电脑的网卡ip设置，不要使用google的dns解析服务器。

1.举例

假设我们上一步找到的版本为： 
AU_LINUX_ANDROID_KK_2.7_RB1.04.04.02.007.050

2.同步manifests

在linux下，创建一个文件夹例如/opt/msm-aosp
在这个新建的文件夹中打开终端，并输入命令 
repo init -u git://codeaurora.org/platform/manifest.git -b release –repo-url=git://codeaurora.org/tools/repo.git –repo-branch=caf-stable 
20M的宽带的话，同步速度至少有1MB/s 
如果是首次使用git，则需要用命令设置一下用户名和邮箱，按照提示设置即可，下为例子 
git config –global user.name “benjaminwan” 
git config –global user.email “benjaminwan@home.com” 
同步完成后，启用”查看”->”显示隐藏文件” 
可以看到当前目录下有个.repo文件夹，进入会发现有个manifests文件夹，这个就是存放tag的地方了

3.搜索xml

在manifests文件夹下用文件浏览器的搜索功能，关键字就填入之前找到的内核版本 
或用命令find . -name "*AU_LINUX_ANDROID_KK_2.7_RB1.04.04.02.007.050*" 
可以找到caf_AU_LINUX_ANDROID_KK_2.7_RB1.04.04.02.007.050.xml这个文件，如果仅仅是找到正确的版本，其实到这里就已经结束了，但为了更深入地解释，就有了接下来的内容。 
现在我们打开它，解释一下这个文件的结构 
project代表某个项目，path代表这个项目同步后最终放在哪个目录，revision就是版本了，upstream是分支号 
￼
接下来找到kernel/msm这项，并记下它的revision：e1926e0c614b3e352b128dd0c7d3c7a914cfbe28 
然后以此revision来搜索 
grep -r “e1926e0c614b3e352b128dd0c7d3c7a914cfbe28” 
接下来可以找到以LNX开头的3项： 
LNX.LA.2.7.4-00500-8960.0.xml 
LNX.LA.2.7-05010-8064.0.xml 
LNX.LA.2.7-05010-8960.0.xml 
通过观察文件名，可以排除第一项，因为2.7.4这个分支号不对，前面我们看到的分支号是2.7 
剩下的2项其实内容一样，读者自己用文件对比工具打开对比一下便知。 
那么最终正确的tag就是LNX.LA.2.7-05010-8960.0

4.高通的release页面

https://www.codeaurora.org/xwiki/bin/QAEP/release 
搜索一下是否存在这个tag，以验证信息对不对 
￼
至此就完成了找版本的步骤

三、同步系统代码

repo init -u git://codeaurora.org/platform/manifest.git -b release -m LNX.LA.2.7-05010-8960.0.xml --repo-url=git://codeaurora.org/tools/repo.git --repo-branch=caf-stable repo sync123

checkout出来后的代码就是这个版本的官方内核所需要的对应版本的msm-aosp系统代码了

同步完成后，.repo这个隐藏文件夹的内容将会达到20G多的大小，而且在后续的适配中已经不再需要这个文件夹了。这个是全仓库代码，当你下次还想同步的时候，可以仍然用这个.repo同步出其它任意tag版本的代码。

既然如此，读者可以把这个.repo文件夹用压缩工具压缩保存，压缩率就选无压缩即可，以节省linux的磁盘空间。

而同步出来的代码，建议读者建立一个新的文件夹保存，文件夹的命名就以版本号为名，以免以后时间久了忘记自己同步的代码版本，例如在本例里笔者就以msm-aosp_LNX.LA.2.7-05010-8960.0这个名字来命名文件夹

然后即可删除每个文件夹下的.git文件，这个文件是git用来管理的，编译无需这些文件，读者可参考第2篇文章用命令find -name ‘.git*’ |xargs rm –rf来删除这些多余的文件

最后，建议读者再把现在这个代码文件夹再用压缩工具压缩备份一次，因为后面还要更改多处代码，备份以免万一。

请不要觉得麻烦，因为咱们后面做的适配比这麻烦百倍，如果读者在这里已经麻烦得受不了，那么就请您到这放弃吧。

四、延伸知识

1.相近的版本

通过上面的范例可以知道，高通的release tag有一定的命名规范 
LNX.LA.2.7-xxxxx-8960.0.xml 
中间5个xxxxx为数字 
那么我们试着查找一下类似的文件 
find . -name "LNX.LA.2.7-*-8960.0.xml" 
./LNX.LA.2.7-02710-8960.0.xml 
./LNX.LA.2.7-01210-8960.0.xml 
./LNX.LA.2.7-03110-8960.0.xml 
./LNX.LA.2.7-02410-8960.0.xml 
./LNX.LA.2.7-05210-8960.0.xml 
./LNX.LA.2.7-02110-8960.0.xml 
./LNX.LA.2.7-04010-8960.0.xml 
./LNX.LA.2.7-03910-8960.0.xml 
./LNX.LA.2.7-01910-8960.0.xml 
./LNX.LA.2.7-06310-8960.0.xml 
./LNX.LA.2.7-04310-8960.0.xml 
./LNX.LA.2.7-02810-8960.0.xml 
./LNX.LA.2.7-02910-8960.0.xml 
./LNX.LA.2.7-04410-8960.0.xml 
./LNX.LA.2.7-04710-8960.0.xml 
./LNX.LA.2.7-01110-8960.0.xml 
./LNX.LA.2.7-05010-8960.0.xml 
如何知道这些tag具体是哪个android版本呢？ 
通过review页面来看，例如 
https://www.codeaurora.org/cgit/quic/la/platform/build/tag/?id=LNX.LA.2.7-06310-8960.0 
id=这边可随意更改为tag名称 
然后按download，把这个revision的代码下载回去 
打开core/build_id.mk就可以看到export BUILD_ID= KTU84L 
打开core/version_defaults.mk就可以看到PLATFORM_VERSION := 4.4.3

2.升级内核代码的原理

前提当然是准确的找到内核当前的版本了。 
官方内核肯定是基于某个高通内核版本进行修改的。 
如果没安装git图形用户工具，请先安装一下 
apt-get install gitk或者apt-get install qgit

假设我们当前的版本是05010，并且已知为android 4.4.2_r1 KOT49H 
现在我们知道后面还有06310，并且版本为android 4.4.3 KTU84L

想要把内核升级到适配android 4.4.3 KTU84L版本该怎么做呢？ 
首先把高通的内核代码仓库同步下来 
新建一个文件夹例如/opt/msm-kernel 
git clone git://codeaurora.org/quic/la/kernel/msm 
等同步完成，进入刚同步好的文件夹，打开终端 
这里介绍一个新的命令gitk tagA..tagB或qgit tagA..tagB 
解释一下这个命令的意思，以图形方式显示从tagA到tagB之间经历的变化，示范如下 
gitk LNX.LA.2.7-05010-8960.0..LNX.LA.2.7-06310-8960.0 
或 
qgit LNX.LA.2.7-05010-8960.0..LNX.LA.2.7-06310-8960.0 
￼
读者就可以看到从05010到06310，高通标准内核经历了哪些变化。 
那么以此为参考，去升级官方内核代码就行了。 
至于是否有比手工升级更为方便的方法，当然方法各种各样。 
git rebase、git merge、git cherry-pick等本文重点不在这里也就不再提了。

2 0





CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(4)：验证代码并编写自己的device

发表于2015/2/22 1:08:02  2900人阅读

分类： android

前面花了那么多篇幅做准备，直到此篇才开始真正开始讲适配，读者一定很激动，但先不要高兴得太早，笔者必须先提出一个声明，虽然此系列文章不要求读者有编程基础，但理所当然的不具备者在适配时难度更大(只能靠经验和资料)；而具备编程基础的读者也不要高兴得太早，其实很多时候适配并非靠技术，而是靠不懈的毅力。

注意：初次适配者，如果仅靠本系列文章的解惑，依照个人能力、悟性、业余时间的差别，没有2~6个月或更长的时间，是无法做完整个适配过程的。

一、验证编译环境是否正确

首先以高通的内核以及高通提供的范例device来做一次完整编译，以验证开发环境是否OK 
在msm-aosp_LNX.LA.2.7-05010-8960.0目录右键打开终端

source build/envsetup.sh lunch 输入msm8960所在行的编号，比如8. msm8960-userdebug，那么就输入8并回车 make otapackage –j51234

这里-j5代表编译使用5个线程，如果是i7则可以使用9个线程，具体依cpu自身线程数读者自行确定 
如果没有错误，最后会生成msm8960-ota-eng.root.zip类似这样刷机包

二、验证手机内核版本与msm-aosp系统版本是否匹配

msm-aosp编译系统在进行编译时会引用内核的一些变量，如果版本对不上，编译会出错。 
想必读者早早就下载好了手机的官方提供的内核源代码，这步就可以用上它了。 
本文及之后的适配教程就以泛泰手机Vega_IM-A870L为例子，所以这个手机的内核代码就必须去泛泰官方的开源站点去下载。 
高通的kernel与手机的kernel是不一样的，高通的kernel只是用于高通的骁龙开发板(笔者猜测)，而一般手机kernel会在高通kernel的基础上添加许多芯片驱动(当然各家手机公司用的不一样，这个并没有什么统一的标准)

1.放置手机官方内核源代码

首先把aosp源代码目录的kernel文件夹删除。 
然后把官方提供的内核代码解压，按照之前的kernel目录结构放置 
必须注意的是，msm-aosp编译系统不提供像cm那样的多层目录结构以支持多机型多内核让你可在选device时选中对应的内核。aosp只有kernel这个目录，所以要是未来还要适配其它机型，你仍然得替换这个目录。当然如果读者未来有能力了，参照cm去更改编译系统以支持多个内核源代码就更好了。

2.内核配置文件

然后下一步就要找内核的配置文件名，一般官方内核代码解压后，可以在相关说明文档中或编译脚本中找到，泛泰a870的例子是msm8960_ef52l_tp20_perf_defconfig 
这个内核配置文件，可以在内核代码目录的arch/arm/configs里找到，读者不妨打开它，了解一下它的用处，笔者也顺便说说这个文件一个能自定义的地方：

CONFIG_LOCALVERSION="-perf"1

这个会显示在系统的关于里，内核版本这个栏位里 
许多cm内核会改成CONFIG_LOCALVERSION=”-CM” 
读者可以改为自己的id，但请勿尝试使用中文，笔者完全不推荐这么做。

cm的kernel config项是放在BoardConfig.mk里 
而msm-aosp是放在AndroidBoard.mk里，这是个不同点 
那么就打开AndroidBoard.mk修改msm8960_defconfig换成你的手机内核对应的配置名称，这里笔者的例子就改成msm8960_ef52l_tp20_perf_defconfig 
删除源码根目录的整个out目录 
然后按照之前介绍的命令，重新完整编译一次。 
如果没有错误，才可以继续进行下一个步骤。 
如果有问题，请重新回顾上一篇文章的内容，重新找对版本再继续。

三、修改高通自带的device

首先，笔者希望读者能首先熟悉device的编写方法，这个是做编译适配的基础技能，而且有必要从现在就开始练习。 
其次，不要指望参考cm之类的第三方rom的device，当你的机型不被cm支持时，不就傻眼了吗。

1.压缩device/qcom备份一下

2.device/qcom改名并处理多余文件

删除device/qcom下除了msm8960和common文件夹以外的文件夹 
然后把原device/qcom/msm8960改名为device/pantech/a870 
device/pantech/a870文件夹下删除所有.kl、.kcm、.conf、.accept、.deny、.rc、.sh、.ini、.dat、.bin、、sec_config、vold.fstab等文件，并在msm8960.mk里找到相应的copy语句，并删除之。 
删除media文件夹、radio文件夹、snd_soc_msm文件夹，同理在msm8960.mk里找到相应的copy语句，并删除之。 
最终剩下overlay文件夹、Android.mk、AndroidBoard.mk、AndroidProducts.mk、BoardConfig.mk、egl.cfg、fstab.qcom、msm8960.mk、recovery.fstab、system.prop

3.处理device/pantech/common文件夹

删除device文件夹、dtbtool文件夹、init文件夹、media文件夹、product文件夹、rootdir文件夹、recovery文件夹，并在common.mk里找到相应的copy语句，并删除之。

4.把common合并到a870文件夹里

合并后common文件夹删除，如果碰到同名文件，就把文件内容进行合并

5.再回到device/pantech/a870文件夹

新建bluetooth文件夹，并把bdroid_buildcfg.h移动到新建的文件夹里 
对应的BoardConfig.mk里的语句也必须更改 
BOARD_BLUETOOTH_BDROID_BUILDCFG_INCLUDE_DIR := device/pantech/a870/bluetooth 
msm8960.mk文件改名为a870.mk，对应的AndroidProducts.mk里也必须打开来修改 
然后打开a870.mk，修改 
PRODUCT_NAME := a870 
PRODUCT_DEVICE := a870 
common.mk改名为device.mk，并打开a870.mk修改对应的路径名称 
device.mk中删除所有非msm8960的行，PRODUCT_BRAND := qcom改为读者手机生产商，本例里改为pantech 
grep –r “recovery”找一找有没有哪个配置文件有recovery相关的编译配置 
删除所有含有recovery的行（注意保留第2步里提到的recovery.fstab）

6.修改vendorsetup.sh

仅保留如下语句即可 
add_lunch_combo a870-userdebug

7.删除vendor/qcom

删除vendor/qcom/opensource/kernel-tests 
并在device.mk中删除对应的#KERNEL_TESTS语句 
把vendor/qcom压缩备份，然后把vendor/qcom删除以避免在后续的编译中出错

8.修改过程如果有些文件不知道在哪，请善用grep –r “关键字”来查找文件内容

9.边编译边修正错误

有些错误在编译时才容易找到。 
source build/envsetup.sh 
lunch 
输入a870所对应的数字并回车 
make otapackage –j5

10.编译recovery错误

因为我们把相关的配置项删除了，而编译系统又必须编译，所以我们这里要更改编译系统去掉recovery的编译 
打开build/tools/releasetools/ota_from_target_files 
注释如下语句

line454 #script.UnpackPackageDir("recovery", "/system") line462 #recovery_img = common.GetBootableImage("recovery.img", "recovery.img", # OPTIONS.input_tmp, "RECOVERY") #MakeRecoveryPatch(OPTIONS.input_tmp, output_zip, recovery_img, boot_img) line617 #source_recovery = common.GetBootableImage( # "/tmp/recovery.img", "recovery.img", OPTIONS.source_tmp, "RECOVERY", # OPTIONS.source_info_dict) #target_recovery = common.GetBootableImage( # "/tmp/recovery.img", "recovery.img", OPTIONS.target_tmp, "RECOVERY") line765 #if updating_recovery: # script.Print("Unpacking new recovery...") # script.UnpackPackageDir("recovery", "/system")12345678910111213141516

对于初次适配者来说，做完这步可能都得花上1~2天的时间，许多配置项读者不理解但无需担心，在之后漫长的适配历程中，读者就会自己慢慢体会并慢慢懂得。

四、如何节省编译时间

因为反复编译确实很花时间，所以这里专门用一小节的内容来讲如何节省编译时间

1.如何重新编译以节省编译时间

虽然我们反复修改编译，但不变的有2个 
一个是out/host，这个目录是用于存放编译过程中linux本身需要的一些工具 
另一个是out/target/product/a870/obj/KERNEL_OBJ，这个目录是存放内核临时文件的，因为内核我们不改动，所以这个目录每次编译也就不会变化 
于是我们每次删除重新编译就只要保留上面2个目录，其它文件都删掉即可，这样可节省约1/4的编译时间

2.建一个编译脚本

免得每次编译时敲一长串语句

#!/bin/bash CPU_JOB_NUM=$(grep processor /proc/cpuinfo | awk '{field=$NF};END{print field+1}') function build_target() { echo '<<<<<<开始编译>>>>>>' START_TIME=`date +%s` source ./build/envsetup.sh lunch a870-userdebug make otapackage -j$CPU_JOB_NUM END_TIME=`date +%s` let "ELAPSED_TIME=$END_TIME-$START_TIME" echo "Total compile time is $ELAPSED_TIME seconds" echo "Total compile time is $ELAPSED_TIME seconds" > time.txt } build_target echo 编译结束 !!! exit 012345678910111213141516171819

把如上内容保存成a870.sh，保存在源代码根目录 
然后给执行权限 
chmod a+x a870.sh 
以后每次编译时只要执行./a870.sh就可以了 
而且编译完后，会生成一个time.txt文件，里面记录了编译过程一共多少秒，读者就可以知道编译一次花了多少时间。

五、改写device.mk

高通的范例是二段式的写法，举个例子：

#ANGLE ANGLE := libangle 在文件底部还有 PRODUCT_PACKAGES += $(ANGLE)1234

而通常的写法是

#ANGLE PRODUCT_PACKAGES += \ libangle123

打个通俗的比方，高通的语句加了个中间变量，就像这样

A=笨蛋 傻瓜=A12

但其实通常我们只要直接 笨蛋=傻瓜 这样就好了

改写完成后，把一些类似功能的项目集中在一起，比如音频相关的就放在一起 
续行符\要记得自己补上

PRODUCT_PACKAGES += \ audio_policy.msm8960 \ audio.primary.msm8960 \ audio.a2dp.default \ audio.usb.default \ audio.r_submix.default \ libaudio-resampler1234567

然后PRODUCT_LOCALES += hdpi mdpi这里 
依情况增加xxhdpi和xhdpi 
如果是720p就改为PRODUCT_LOCALES += xhdpi hdpi mdpi 
如果是1080p就改为PRODUCT_LOCALES += xxhdpi xhdpi hdpi mdpi

最后，把所有的:=改成+=，请一定改过来，否则后面有些语句会有问题

全部搞定后，编译一次看看有没有什么语法错误

六、修改BoardConfig.mk

先去掉一些无用的项目

TARGET_USE_HDMI_AS_PRIMARY := false ifeq ($(TARGET_USE_HDMI_AS_PRIMARY),true) TARGET_HAVE_HDMI_OUT := false else TARGET_HAVE_HDMI_OUT := true endif # TARGET_USE_HDMI_AS_PRIMARY TARGET_HAVE_HDMI_OUT := false TARGET_INIT_VENDOR_LIB := libinit_msm12345678

把 
-include vendor/qcom/proprietary/common/msm8960/BoardConfigVendor.mk 
改成 
-include vendor/pantech/a870/BoardConfigVendor.mk 
并把这个语句移动到文件底部

然后把这些项目按功能来分类，以便我们后续修改 
下面是笔者的分类，请读者参考如下标签来把语句分类

# CPU # Krait optimizations # Kernel # BootLoader # Platform # Graphics # Audio # Bluetooth # Wifi # File System # Camera # GPS # USB & Vold # Vibrator # Other123456789101112131415

以下举例

# CPU TARGET_GLOBAL_CFLAGS += -mfpu=neon -mfloat-abi=softfp TARGET_GLOBAL_CPPFLAGS += -mfpu=neon -mfloat-abi=softfp TARGET_CPU_ABI := armeabi-v7a TARGET_CPU_ABI2 := armeabi TARGET_ARCH := arm TARGET_ARCH_VARIANT := armv7-a-neon TARGET_CPU_VARIANT := krait TARGET_CPU_SMP := true ARCH_ARM_HAVE_TLS_REGISTER := true # Krait optimizations TARGET_USE_KRAIT_BIONIC_OPTIMIZATION := true TARGET_USE_KRAIT_PLD_SET := true TARGET_KRAIT_BIONIC_PLDOFFS := 10 TARGET_KRAIT_BIONIC_PLDTHRESH := 10 TARGET_KRAIT_BIONIC_BBTHRESH := 64 TARGET_KRAIT_BIONIC_PLDSIZE := 64 # Kernel BOARD_KERNEL_BASE := 0x80200000 BOARD_KERNEL_PAGESIZE := 2048 BOARD_RAMDISK_OFFSET := 0x02000000 BOARD_MKBOOTIMG_ARGS := --ramdisk_offset 0x02000000 BOARD_KERNEL_CMDLINE := console=ttyHSL0,115200,n8 androidboot.hardware=vu2sk user_debug=31 msm_rtb.filter=0x3F ehci-hcd.park=3 maxcpus=2 lpj=67741 # BootLoader TARGET_NO_BOOTLOADER := true TARGET_BOOTLOADER_NAME := msm8960 TARGET_BOOTLOADER_BOARD_NAME := MSM8960 # Platform TARGET_NO_RADIOIMAGE := true TARGET_BOARD_PLATFORM := msm8960 TARGET_USES_QCOM_BSP := true TARGET_ENABLE_QC_AV_ENHANCEMENTS := true TARGET_POWERHAL_VARIANT := qcom # Graphics TARGET_USES_ION := true TARGET_USES_OVERLAY := true BOARD_EGL_CFG := device/pantech/a870/egl.cfg # Audio BOARD_USES_GENERIC_AUDIO := true BOARD_USES_LEGACY_ALSA_AUDIO := true12345678910111213141516171819202122232425262728293031323334353637383940414243444546

等等，后面就不详细说了

七、修改boot参数

BoardConfig.mk里的# Kernel小节 
内核的基地址，偏移地址，以及传递参数

BOARD_KERNEL_BASE BOARD_RAMDISK_OFFSET BOARD_MKBOOTIMG_ARGS BOARD_KERNEL_CMDLINE1234

这些参数必须从读者的官方rom的boot.img里获取信息，请参考基础知识，后半部分关于修改的 
http://blog.csdn.net/benjaminwan/article/details/8952736 
注意文章最后一个图片里的3个红框 
读者编译出来的boot.img与官方的对比，3个红框的内容要完全一样才行 
另外介绍一个新的编译命令 
make bootimage –j5这个命令单独编译boot.img

八、修改ramdisk

在device/pantech/a870里新建一个ramdisk目录
把官方boot的ramdisk里的所有init.xx全部复制进去，并修改device.mk添加类似如下语句

PRODUCT_COPY_FILES += \ $(LOCAL_PATH)/ramdisk/init.pantech.usb.rc:root/init.pantech.usb.rc \ $(LOCAL_PATH)/ramdisk/init.pantech.usb.sh:root/init.pantech.usb.sh \ $(LOCAL_PATH)/ramdisk/init.qcom.rc:root/init.qcom.rc \ $(LOCAL_PATH)/ramdisk/init.qcom.sh:root/init.qcom.sh \ $(LOCAL_PATH)/ramdisk/init.qcom.syspart_fixup.sh:root/init.qcom.syspart_fixup.sh \ $(LOCAL_PATH)/ramdisk/init.rc:root/init.rc \ $(LOCAL_PATH)/ramdisk/init.target.rc:root/init.target.rc \ $(LOCAL_PATH)/ramdisk/init.class_main.sh:root/init.class_main.sh \ $(LOCAL_PATH)/ramdisk/init.qcom.class_core.sh:root/init.qcom.class_core.sh \ $(LOCAL_PATH)/ramdisk/init.qcom.early_boot.sh:root/init.qcom.early_boot.sh \ $(LOCAL_PATH)/ramdisk/ueventd.qcom.rc:root/ueventd.qcom.rc \ $(LOCAL_PATH)/ramdisk/ueventd.rc:root/ueventd.rc \ $(LOCAL_PATH)/fstab.qcom:root/fstab.qcom1234567891011121314

切勿生搬硬套，因为每个机型不一样。

假如编译出来的init不能用的话(请做完后面的显示部分适配后才能判断是否可用)，可以把官方的init程序也按照这个方法添加进去 
如果使用了官方的init，那么charger最好也改成官方的(关机充电相关) 
device.mk里去掉

#Charger PRODUCT_PACKAGES += \ charger \ charger_res_images1234

然后加上官方ramdisk里的charger以及res下的图片目录，就按照官方ramdisk目录结构来添加 
泛泰的话，这2者都还算标准 
但LG就比较奇异了，充电图片在在system\vendor\etc\chargerimages里，这个后面可以添加到proprietary-blobs.txt 
而charger程序则在sbin/ chargerlogo 
总之读者必须随机应变，毕竟每个机型都不一样 
最终这一步要做到make出来的boot/ramdisk与官方的boot/ramdisk一样就行

九、微调ramdisk

接下来要对ramdisk做一些小小的修改，这里讲几个重要修改点，当然这也是每个机型不一样，读者得靠自己多试验总结才行 
以泛泰为例

1.修改init.qcom.rc

# import cne init file on post-fs export LD_PRELOAD /system/lib/libNimsWrap.so123

cm等第三方rom经常去掉cne服务，故可以把这段删除 
有些机型可能不叫作init.qcom.rc，那么读者可以grep –r “libNimsWrap”来找，例如LG的F200就叫做init.grand-common.rc

2.修改init.rc

mkdir /cache 0770 system cache 
改成 
mkdir /cache 0771 system cache

chmod 0770 /cache 
改成 
chmod 0771 /cache

# create dalvik-cache, so as to enforce our permissions mkdir /data/dalvik-cache 0771 system system12

改成

mkdir /data/dalvik-cache 0771 system system chown system system /data/dalvik-cache chmod 0771 /data/dalvik-cache123

如果官方还加载了preload分区，也可以整段去掉，比如类似如下的语句 
mount ext4 /dev/block/mmcblk0p13 /preload rw remount 
前后可能还有一些分区检查，复制文件的语句 
preload分区是存放一些出厂预置软件或资源的，对于aosp则完全无用

删除自恢复recovery服务

service flash_recovery /system/etc/install-recovery.sh class main oneshot123

3.修改init.target.rc和fstab.qcom

这2个文件相互配合用于加载各分区 
需要注意的是，这2个文件名称也不是固定，而且有的机型需要修改，有的机型不需要修改 
比如泛泰的需要修改，而LG则无需修改 
这里以泛泰为例，先看init.target.rc 
on fs段

wait /dev/block/platform/msm_sdcc.1/by-name/system mount ext4 /dev/block/platform/msm_sdcc.1/by-name/system /system ro barrier=112

这个语句用于加载system分区

wait /dev/block/platform/msm_sdcc.1/by-name/cache exec /system/bin/mmcblk_utils ext4 /dev/block/platform/msm_sdcc.1/by-name/cache exec /system/bin/e2fsck -p /dev/block/platform/msm_sdcc.1/by-name/cache mount ext4 /dev/block/platform/msm_sdcc.1/by-name/cache /cache nosuid nodev barrier=11234

这个语句用于加载cache分区

wait /dev/block/platform/msm_sdcc.1/by-name/userdata exec /system/bin/mmcblk_utils ext4 /dev/block/platform/msm_sdcc.1/by-name/userdata exec /system/bin/e2fsck -p /dev/block/platform/msm_sdcc.1/by-name/userdata123

这个语句用于加载userdata分区

这些语句用工具检查了分区，但我们可以不需这种加载形式，把这些语句都删除 
把加载语句放到fstab.qcom里

/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 rw,barrier=1 wait /dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 nosuid,nodev,barrier=1 wait,check /dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 nosuid,nodev,barrier=1,noauto_da_alloc wait,check,encryptable=footer,length=-1638412345

需要注意的是，官方的userdata区加载语句还多了encryptable=/persist/metadata这样的结尾，估计是用来加密分区的，我们也把它去掉

4.去掉LG加密服务(此项仅针对LG，泛泰无需)

适配一切都是灵活且多变的，如果碰到困难，读者请无需气馁，多试即可 
下面以LG F200的ramdisk为例，修改并去掉一些无用的东西 
修改init.grand-common.rc，去掉import init.lge.log.rc 
修改init.rc，去掉import /init.lge.early.rc，去掉import /init.lge.rc 
然后删除如下文件 
init.lge.early.rc 
init.lge.log.rc 
init.lge.rc 
lgdms.fota.rc 
lgdms.fota_update.rc

十、build.prop修改

device/pantech/a870/system.pro这个文件添加的语句，最后会生成到build.prop里 
我们先把这个文件清空，把官方build.prop中间那段写到这个文件里，读者自己试着编译看看就知道如何编写这个文件了。

当读者把本篇文章的内容实践完成时，就已经算是入门了。

编译出来的rom肯定不能启动，但可以尝试刷到手机里看看反应，如果device名称不符合还得先去掉机型验证或自己编译一个recovery，因为视频和音频部分还未适配，现在仅仅是做个热身而已。

小白就不要尝试了，以免变砖，话又说回来，即使做为rommer难免会失手让手机变砖的时候，常在河边站哪有不湿鞋。

所以作为rommer并非大家想象中那么酷，小朋友们切勿模仿。

1 0




CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(5)：显示、NFC、overlay

发表于2015/2/22 19:13:39  1791人阅读

分类： android

从这一篇开始，稍微有点技术含量，此篇是后续适配的基础，请读者务必掌握。

一般适配是以一项一项功能来进行的，笔者一般遵循显示&NFC->音频->通信->wifi->蓝牙->传感器->摄像头->GPS->其它，这样的顺序进行适配调试。 
当然高手一下子全搞定也是可以的，不过既然要写成教程，就必须一部分一部分来讲。 
如果读者在适配到某一部分碰到问题时，可以暂时跳过解决不了的问题，先继续下一部分的适配。 
为何从显示部分开始呢，因为显示部分不能用的话，无法进到手机系统界面，看不到界面当然不开森。如果这部分搞不定，那后续也就不用适配了。 
然后是音频，音频是重点，也是整个rom的难点，这部分需要有些编程基础才容易理解。 
音频对于msm-aosp来讲是难点，但对于cm来讲则不是，因为cm开发团队都已经帮大家改好代码了。 
接着是通信，因为通话需要调用音频，所以音频得放在通信之前搞定。

最后要讲的是，适配与插桩不一样的地方，插桩主要是看log修bug。 
而编译出来的rom在代码上则没什么可修，只有缺lib或需要改配置重新编译而已。

一、ROM功能自测

正规地讲，软件的开发与测试分开的，但在前期开发时，rommer只能自己做测试 
所以做业余rommer一点都不酷，相反是很苦逼的。 
于是，读者在适配过程中得自己做好rom基础功能的自测，笔者稍微改动了乐蛙开发组提供的表格，给读者做个示范：http://download.csdn.net/detail/benjaminwan/8452181 
￼
硬件功能的测试，必须在手机里安装相应的apk来做，这里推荐2个：z硬件测试、安兔兔评测

二、vendor-maker

有许多服务程序、配置、lib需要从官方rom里提取，所以首先需要一个vendor-maker脚本 
当然读者也可以选择把这些东西都集成到device里，但实在是没有必要

1.下载地址

http://download.csdn.net/detail/benjaminwan/8452201 
包含2个sh脚本，以及一个txt文件 
这里仍然以泛泰a870为例 
把文档解压缩，得到3个文件，这3个文件都放到device/pantech/a870里 
然后赋予2个sh执行权限 
chmod a+x *.sh

2.配置要点

先把官方rom的system文件夹解压放到linux里，这里以泛泰A870为例 
笔者的路径是这样/opt/IM-A870L_S1235210/system 
system下只要留下bin、etc、lib、usr、vendor这几个文件夹就行了

首先是extract-files.sh 
VENDOR=pantech 
DEVICE=a870 
读者有必要自己修改这2行机型信息 
然后是这句复制语句，改为读者自己的放置路径 
cp /opt/IM-A870L_S1235210/system/FILEBASE/$FILE

然后是setup-makefiles.sh 
VENDOR=pantech 
DEVICE=a870 
和上面一样读者自行修改

最后是proprietary-blobs.txt 
这个文件填入需要从官方rom里提取的文件 
每一行一个文件，行首加#号的话就是注释

如何使用呢？ 
首先必须修改device/pantech/a870/a870.mk增加引用 
在文件底部增加一行 
$(call inherit-product-if-exists, vendor/pantech/a870/a870-vendor.mk)

然后在device/pantech/a870下打开终端执行 
./extract-files.sh 
每次更改了proprietary-blobs.txt都必须重新执行一次此脚本 
成功执行的话，终端没有任何提示，如果有提示则可能是找不到某个文件，根据提示读者也很容易从proprietary-blobs.txt里找到问题 
脚本执行完后，会在vendor/pantech/a870里生成相应的文件

三、显示部分的适配与调试

因为内核部分无需修改，那么这部分的内容就轻松多了。 
只要通过修改配置编译出正确的硬件抽象层hw，再配合firmware以及Adreno Llib一般就行了。

1.修改BoardConfig.mk

去除TARGET_HARDWARE_3D := false 
确保有如下项目

# Graphics USE_OPENGL_RENDERER := true TARGET_USES_ION := true TARGET_USES_OVERLAY := true TARGET_USES_C2D_COMPOSITION := true NUM_FRAMEBUFFER_SURFACE_BUFFERS := 3 TARGET_DISPLAY_INSECURE_MM_HEAP := true BOARD_EGL_CFG := device/ pantech/a870/egl.cfg12345678

对于任何不知道用途的项目，都可以用grep –r “项目名称”来查找到对应的代码位置，读者可以自行了解。

2.修改proprietary-blobs.txt

把官方rom的system/etc/firmware下所有内容加入#etc小节

接下来这些是额外的内容，虽然与显示部分无关，但也放到这里来一起讲 
顺便把官方rom的system/etc下所有xxx.sh文件加入#etc小节 
其它的还有如下文件夹，保持与官方rom一样即可： 
etc/bluetooth 
etc/dhcpcd 
etc/permissions 
etc/snd_soc_msm 
以及如下文件，有些手机可能没有或不一样，如果不确定，多出来也不要紧： 
etc/media_codecs.xml 
etc/media_profiles.xml 
etc/quipc.conf 
etc/sap.conf 
etc/sec_config 
etc/thermald-8960.conf 
etc/vold.fstab

usr目录也一样，请保持与官方rom一样即可，添加到#usr小节

还有一个容易漏掉的目录是lib/modules目录，这个文件夹里比官方rom缺少的文件补充进去，同名文件则无需替换，添加到#modules小节

最后找一找官方rom里有没有如下文件，有的就取消注释

#display #vendor/lib/egl/eglsubAndroid.so #vendor/lib/egl/libEGL_adreno.so #vendor/lib/egl/libGLESv1_CM_adreno.so #vendor/lib/egl/libGLESv2_adreno.so #vendor/lib/egl/libGLESv2S3D_adreno.so #vendor/lib/egl/libq3dtools_adreno.so #vendor/lib/libadreno_utils.so #vendor/lib/libC2D2.so #vendor/lib/libc2d2_a3xx.so #vendor/lib/libc2d2_z180.so #vendor/lib/libCB.so #vendor/lib/libgsl.so #vendor/lib/libllvm-a3xx.so #vendor/lib/libllvm-arm.so #vendor/lib/libOpenCL.so #vendor/lib/libOpenVG.so #vendor/lib/libsc-a2xx.so #vendor/lib/libsc-a3xx.so12345678910111213141516171819

一般来讲， msm8960会比apq8064少几个a3xx.so

小知识：读者可以自己对比cm11源代码的hardware/qcom/下的display/msm8960与display-caf文件夹(也就是对比一下非caf与caf之间的区别) 
￼
可以看出caf多了一个libvirtual，如果读者的手机官方rom里system/lib有libvirtual.so，就说明是手机的官方内核是caf内核

3.执行vendor-maker脚本重新生成vendor

重新编译rom！ 
这次编译如果成功完成，那么尝试刷入手机，就应该能启动看到启动器了。 
如果进不到系统，显示phone fc的话，可以编辑build.prop，去除对通信lib的调用 
可以把中间的整段删掉，包括底部的 
ro.vendor.extension_library=/system/lib/libqc-opt.so 
这样就可以顺利入桌面了，这时读者可以装个安兔兔跑个分看看显示驱动是否正常了。 
这时进入设置可能会fc，因为nfc等还没有正确配置造成的，请读者无需着急

四、增加NFC配置

1.修改device.mk

增加如下语句

# NFC packages PRODUCT_PACKAGES += \ libnfc \ libnfc_jni \ Nfc \ Tag \ com.android.nfc_extras # NFCEE access control ifeq ($(TARGET_BUILD_VARIANT),user) NFCEE_ACCESS_PATH := $(LOCAL_PATH)/nfc/nfcee_access.xml else NFCEE_ACCESS_PATH := $(LOCAL_PATH)/nfc/nfcee_access_debug.xml endif # NFC access control + feature files + configuration PRODUCT_COPY_FILES += \ $(NFCEE_ACCESS_PATH):system/etc/nfcee_access.xml \ frameworks/native/data/etc/com.android.nfc_extras.xml:system/etc/permissions/com.android.nfc_extras.xml \ frameworks/native/data/etc/android.hardware.nfc.hce.xml:system/etc/permissions/android.hardware.nfc.hce.xml \ frameworks/native/data/etc/android.hardware.nfc.xml:system/etc/permissions/android.hardware.nfc.xml123456789101112131415161718192021

2.补齐nfc文件

把提供的3个nfc文件解压到device/pantech/a870 
http://download.csdn.net/detail/benjaminwan/8452231 
最终的目录结构是device/pantech/a870/nfc/xxx文件

3. 修改proprietary-blobs.txt

把这2个文件添加到proprietary-blobs.txt 
lib/hw/nfc.default.so 
vendor/firmware/libpn544_fw.so

然后重新编译，重新刷机吧

五、overlay

device/pantech/a870/overlay里存放的是一些xml配置值 
这里笔者提供泛泰a870的仅供读者参考，就不再细说了 
http://download.csdn.net/detail/benjaminwan/8452511

请读者务必反编译参考官方rom的framework-res.apk等来修改 
这些配置关系到apn、电源配置、tf卡加载、otg加载、信号制式、呼吸灯颜色、屏幕最低亮度、wifi热点等等，每个手机不同。

六、启动后查找缺少的公共lib

按照第二篇文章后部介绍的调试方法，通过eclipse实时查看lib功能，过滤关键字为lib，查找缺少的lib文件 
一般缺lib会以这种方式提示： 
dlopen failed: could not load library “libsensor1.so” needed by “sensors.msm8960.so”; caused by library “libsensor1.so” not found 
就看此行结尾处，libsensor1.so这个即是缺的lib

然后用第二篇文章提到的adb命令工具，adb root，adb remount 
再用传送工具，把官方rom的对应lib传送的手机里

再重启手机，再以这种方式查找缺的lib，直到不再缺lib为止

这些lib都必须记录下来，最后添加到proprietary-blobs.txt

1 0


CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(6)：音频

发表于2015/2/22 19:59:17  1503人阅读

分类： android

这一篇是全系列文章的重点，故笔者会多啰嗦一些原理，多问几个为什么，请读者见谅。

笔者以android 4.4.2_r1 KOT49H为例的msm-aosp来适配，此文章则需要cm的代码来辅助理解音频的配置 
请读者自行下载cm的源代码，最好与自己下载的msm-aosp相近。 
例如与笔者这个相近的就是cm11-m4~m7，那么笔者就下载了cm11-m7 KVT49L的代码来参考。 
本文用到的仅仅是源码目录下的hardware目录，所以笔者也单独提供了这个目录的压缩文档，以方便读者实践： 
http://download.csdn.net/detail/benjaminwan/8452249

一、对比cm与msm-aosp的hardware/qcom目录

记得对比选项里要钩基础规则对比 
￼
左边为cm的hardware，右边边为msm-aosp的hardware 
首先请读者思考一个问题： 
分别把左边的audio与右边的audio文件夹对比，以及左边的audio-caf与右边的audio文件夹对比，这2种情况下，左边哪个文件夹与右边代码最相似。 
当然读者会发现左边的audio-caf代码与右边的audio最为相似 
如果读者也同步了google-aosp的代码，就会发现cm的audio文件夹与google-aosp的audio文件夹最相似。 
从这里我们可以总结得出：cm实际上集成了google以及高通，二者的audio代码 
那么就有了第二个问题，cm如何通过配置来选择使用哪种音频代码？

二、对比audio目录

接下来就把cm的qcom/audio-caf与msm-aosp的qcom/audio目录对比 
以下文章的内容都默认以cm的audio-caf来讲解了 
对比audio/Android.mk 
￼
首先可以看出cm比aosp多了这个语句 
ifeq ($(TARGET_QCOM_AUDIO_VARIANT),caf)
这个语句作用就是cm用来选择是audio还是audio-caf的 
解释一下：如果在BoardConifg.mk里有TARGET_QCOM_AUDIO_VARIANT := caf那么就选择audio-caf文件夹来编译，相反，如果不配置此项，则默认使用audio文件夹

分析完左边的cm，再来研究右边的msm-aosp 
cm11多出来的是一些其它平台的代码，msm8660,msm8610之类的 
接下来只看红框中的共通项

ifeq ($(BOARD_USES_LEGACY_ALSA_AUDIO),true) include $(MY_LOCAL_PATH)/legacy/Android.mk else include $(MY_LOCAL_PATH)/hal/Android.mk endif12345

这是一个选择语句，那么到底该选择legacy文件夹或者是hal文件夹呢？

接下来要讲一个小知识，音频hw实际上分为2种，如上看到的legacy以及hal 
官方rom的话，msm8960平台使用legacy，而msm8974平台使用hal 
来讲讲这2种hw驱动在官方rom里可以看到什么区别 
legacy驱动，需要在etc里有个snd_soc_msm文件夹，里面放音频配置文件 
而hal驱动，则会在etc下有个mixer_patchs.xml 
而且legacy的系统lib下没有libaudioroute.so，相反hal驱动则有 
举个例子，泛泰A910，msm8974平台 
￼
msm8960平台的例子，请读者自己打开官方rom查看一下便知。

接下来第二个提示要点，对比cm与msm-aosp的hal文件夹，可以发现msm-aosp的hal文件夹缺了许多代码并感觉残缺不全，对，因为我们当前同步的msm-aosp代码仅针对msm8960平台，所以实际上hal文件夹代码是缺失的。 
如果读者后续也同步了msm8974平台的msm-aosp，那么对比一下就知道怎么回事了。

回答前面提到的问题，从官方rom得到的提示以及对比cm的hal文件夹，我们应该选择legacy文件夹来编译 
所以必须在BoardConfig.mk里添加BOARD_USES_LEGACY_ALSA_AUDIO := true

小知识：因为cm集成了全部的音频代码(包括google、高通各个平台)，所以编译cm时，即使msm8960平台也可以选择hal来编译。

三、对比legacy文件夹

￼
cm还集成了msm7x30以及msm8660平台的代码，这2个可以不管 
只看右边红框的共通项 
从逻辑上分析，legacy文件夹下的Android.mk里只有这么一个选择项 
那么它就必须要选中，否则上一级选中了legacy文件夹就失去了作用 
所以Boardconfig.mk里就必须要有 
BOARD_USES_ALSA_AUDIO := true

在原来的Boardconfig.mk里，高通在范例里配置了 
BOARD_USES_GENERIC_AUDIO := true，这行可以删掉了 
这是android自带的通用音频驱动，当然无法正确驱动高通平台

四、对比4个文件夹

￼
4个文件夹，有3个不一样，那么从最简单的、相同的那个开始看 
audiod文件夹是最简单的，而且与cm11的代码完全一样

五、对比audiod文件夹

￼
截图里面3个红框的部分是一般我们需要注意或者需要看的地方 
第一个红框：选择语句就不再解释了 
第二个红框：代表依赖的共享lib，也就是说编译这个audio依赖这4个lib 
第三个红框：LOCAL_MODULE:= audiod，这句表示此模块编译后生成的文件名为audiod

那么问题来了，这个audiod需要编译吗？ 
提示： 
1.官方rom是我们唯一可以参考的； 
2.LOCAL_MODULE代表编译后这个模块最终生成的文件名； 
3.笔者也不知道读者的机型是否需要编译audiod模块；

OK，答案揭晓了： 
既然知道这个模块编译之后，文件名叫做audiod，那么在官方rom里找一找，有没有叫做audiod的文件，如果没有就是不需要，如果有就是需要 
当然，泛泰a870是不需要的，所以这部分就不添加任何语句

六、对比mm-audio文件夹

这个文件夹基本上与cm一样，仅有2处稍有区别，cm11的更改肯定有它的道理，读者只要知道与cm有些许区别就行。

这个文件夹下的Android.mk里，并没有提供选择题 
include $(call all-subdir-makefiles) 
这个就是全选，不需要我们再手工配置指定

七、对比libalsa-intf文件夹

重点来了 
￼
￼
看上下2个截图，左右的区别，重点在于TARGET_USES_QCOM_MM_AUDIO这个配置项的形式不同。 
右边的代码形式是ifeq ($(strip $(TARGET_USES_QCOM_MM_AUDIO)),true) 
左边的代码形式是ifneq ($(TARGET_USES_QCOM_COMPRESSED_AUDIO),false) 
为何cm与msm-aosp有差异，或者cm为何要从ifeq更改为 ifneq？ 
读者理解了cm为何要这么改，后面的最后一个文件夹也就能立刻理解了

现在讲解一下： 
ifneq (AAA,false) 
这种语句，在不配置AAA或AAA不等于false(也就是等于true)时，就满足if条件 
换句话来讲也就是cm改成了：即使不配置，也默认启用此项 
因为cm代码是面对的所有机型，那么最终就说明这个项目对所有机型都是有用的 
除非你在BoardConfig.mk里手工指定了这项为fasle，否则默认都是启用的

ok，回到右边msm-aosp的代码 
msm-aosp这个选项与cm语法不一样，它确实要求我们选择是否配置 
但因为从cm代码得知，这个项目一般都是需要选中的，所以我们需要在BoardConfig.mk里增加TARGET_USES_QCOM_MM_AUDIO := true

八、对比alsa_sound文件夹

这是音频最后一个文件夹 
￼
从截图我们可以看到cm做了许多更改，主要是把ifeq(true)改为ifneq(false)的形式 
那么从前一个要点可以知道，这种形式的更改，会导致不配置也默认启用。 
ok，进入正题 
cm改动的项目，都是aosp必须打开的项目，所以最终还要在BoardConfig.mk里的#Audio节里添加

QCOM_ACDB_ENABLED := true QCOM_ANC_HEADSET_ENABLED := true QCOM_AUDIO_FORMAT_ENABLED := true QCOM_CSDCLIENT_ENABLED := true QCOM_PROXY_DEVICE_ENABLED := true QCOM_OUTPUT_FLAGS_ENABLED := true QCOM_USBAUDIO_ENABLED := true QCOM_ADSP_SSR_ENABLED := true QCOM_FLUENCE_ENABLED := true QCOM_TUNNEL_LPA_ENABLED := true12345678910

九、音频部分总结

BOARD_USES_GENERIC_AUDIO := true，这行删除 
添加如下内容

BOARD_USES_LEGACY_ALSA_AUDIO := true BOARD_USES_ALSA_AUDIO := true TARGET_USES_QCOM_MM_AUDIO := true QCOM_ACDB_ENABLED := true QCOM_ANC_HEADSET_ENABLED := true QCOM_AUDIO_FORMAT_ENABLED := true QCOM_CSDCLIENT_ENABLED := true QCOM_PROXY_DEVICE_ENABLED := true QCOM_OUTPUT_FLAGS_ENABLED := true QCOM_USBAUDIO_ENABLED := true QCOM_ADSP_SSR_ENABLED := true QCOM_FLUENCE_ENABLED := true QCOM_TUNNEL_LPA_ENABLED := true12345678910111213

十、关于编译错误的处理

改完BoardConfig.mk就可以开始重新编译了 
在编译的过程中可能会碰到几次编译错误

1.缺intermediates错误

需要目标"out/target/product/a870/obj/SHARED_LIBRARIES/libacdbloader_intermediates/export_includes”

对于这种错误，需要在device/pantech/a870/Android.mk里添加

$(shell mkdir -p $(OUT)/obj/SHARED_LIBRARIES/libacdbloader_intermediates/) $(shell touch $(OUT)/obj/SHARED_LIBRARIES/libacdbloader_intermediates/export_includes)12

注意：linux是区分大小写的，OUT必须是大写 
这个语句是用来hack的，让编译系统误以为我们有libacdloader源代码(但实际上我们没有，我们只有从官方rom里提取的lib)

然后修改proprietary-blobs.txt添加libacdbloader.so 
然后修改setup-makefiles.sh，取消下面语句的注释，用于把proprietary-blobs.txt提取的lib复制到obj目录

PRODUCT_COPY_FILES += \\ $OUTDIR/proprietary/lib/libacdbloader.so:obj/lib/libacdbloader.so12

然后重新生成vendor，再继续编译。

如果碰到其它音频lib文件提示类似的错误，请读者依葫芦画瓢处理。

2.源码编译错误

编译停下来的地方基本上不是发生错误的地方，在终端里搜索关键字error，选向上搜索，找到真正发生错误的地方。 
其中一个是libalsa-intf\alsa_ucm.c，错误提示是fatal error: acdb-loader.h : NO such file or directory 
对比cm 
￼
之前说过，我们没有libacdbloader的源代码，所以这个acdb-loader.h也就无法提供了 
而cm则更改了这句代码，但msm-aosp需要这样改： 
右边注释掉，注意，C代码双斜杠是注释//

//#if defined(QC_PROP) // #include "acdb-loader.h" //#else //#endif1234

最终是这个样子 
￼

另一个错误发生在：alsa_sound/AudioHardwareALSA.cpp 
‘PROXY_OPEN_RETRY_COUNT’ was not declared in this scope 
错误指向这里 
￼
参考cm，加上#ifdef QCOM_USBAUDIO_ENABLED和#endif即可

十一、声音配置微调

对于某些有双mic降噪功能的手机，一般会在手机顶部以及底部各有一个mic。 
正常底部mic作为主mic，要大声，顶部mic作为降噪mic，要小声。 
这个可以用z硬件测试的mic测试功能，分别对着顶部和底部mic讲话，看声音幅度就知道是否有颠倒。 
如果颠倒了，我们要调整build.prop里的配置值来修正 
persist.audio.handset.mic=digital 
改成 
persist.audio.handset.mic=analog 
或者反之，请读者自行试验

十二、进阶调试

1.耳机插入检测的方式

andoird一共有2种检测方式 
方法一：由内核负责检测，设备驱动名为h2w，一般会在/sys/class/switch或/sys/devices/virtual/switch 
方法二：由音频系统负责检测，msm8960就属于此种情况，实际由PM8921的GPIO38脚负责 
如何知道手机是哪种检测方式？用排除法吧 
查看logcat信息： 
W/WiredAccessoryObserver( 627): This kernel does not have wired headset support 
这样的语句即代表内核不支持耳机检测，所以只能由音频系统来检测了。

2.耳机插入检测GPIO查看

原理图下载：http://download.csdn.net/detail/benjaminwan/8453547 
查看原理图第18页 
￼
PM8921的GPIO38脚，标签ANC_HS_DET即为耳机检测

开adb shell，取得root权限 
cat /sys/kernel/debug/gpio 
可以看到分成好几段，这是按功能把芯片引脚区分成几个段而已

GPIOs 0-151, platform/msmgpio, msmgpio: GPIOs 152-195, platform/pm8xxx-gpio, pm-gpio: GPIOs 196-207, platform/pm8xxx-mpp.0, pm8xxx-mpp: GPIOs 208-211, platform/pm8xxx-mpp.1, pm8xxx-mpp:1234

我们要查看原理图里的PM8921的GPIO38脚，在debug信息里如何换算成第几个GPIO呢？ 
看上面的分段信息，第一段即MSM8960为GPIOs 0-151，共有151脚，第二段就是PM8921，我们要PM8921的第38脚，那么就是151+38= 189脚

查看GPIOs 152-195, platform/pm8xxx-gpio, pm-gpio:这一段 
当耳机插入时为高电平 
gpio-189 (-- ) in hi 0x05 0x10 0x2a 0x30 0x40 0x58 
当耳机未插入时为低电平 
gpio-189 (-- ) in lo 0x05 0x10 0x2a 0x30 0x40 0x58

3.输入设备事件查看

开adb shell，取得root权限

cat /proc/bus/input/devices I: Bus=0000 Vendor=0000 Product=0000 Version=0000 N: Name="apq8064-tabla-snd-card Button Jack" P: Phys=ALSA S: Sysfs=/devices/platform/soc-audio.0/sound/card0/input2 U: Uniq= H: Handlers=kbd event2 cpufreq B: PROP=0 B: EV=3 B: KEY=f8 4 0 0 0 c0000 0 0 0 I: Bus=0000 Vendor=0000 Product=0000 Version=0000 N: Name="apq8064-tabla-snd-card Headset Jack" P: Phys=ALSA S: Sysfs=/devices/platform/soc-audio.0/sound/card0/input3 U: Uniq= H: Handlers=event3 cpufreq B: PROP=0 B: EV=21 B: SW=1c0541234567891011121314151617181920

可以找到如上类似的信息，可能因手机不一样而不一样 
其中Headset Jack即为耳机插入检测 
Button Jack是耳机线控按钮检测

从信息得知 
耳机检测设备路径/devices/platform/soc-audio.0/sound/card0/input3 
对应的Handlers为event3

我们来测试一下： 
cat /dev/input/event3 
执行完命令后就放着，然后插入或拔出耳机，命令行会输出一些调试信息，但我们没有专用的查看工具所以无法查看具体信息，ctrl+C结束

耳机线控按钮检测设备路径/devices/platform/soc-audio.0/sound/card0/input2 
对应的Handlers为event2 
cat /dev/input/event2 
同样地，按下耳机线控按钮，命令行会输出一些调试信息

0 0





CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(7)：信号通讯

发表于2015/2/22 20:04:38  1304人阅读

分类： android

前面的显示与音频是难关，通信的适配比较简单，只需要一些技巧即可。

一、补齐通讯lib

先查看官方rom的system/bin里有没有cpmgrif这个程序，如果没有就下载笔者提供的吧 
http://download.csdn.net/detail/benjaminwan/8452331

把cpmgrif传送到手机system/bin里 
连上调试，打开一个adb shell并取得root权限 
执行cpmgrif 
按照命令行里的提示把缺少的lib传送进去补齐，记得记录下来并添加到proprietary-blobs.txt的#rild小节

二、补齐系统服务

现在system/bin中仍然缺少许多系统服务，对比官方rom与编译出来的aosp系统 
把bin文件夹下比官方rom少的程序传送进去，并按照上面的方法，每传送一个执行一下，补齐lib 
记得记录下来并添加到proprietary-blobs.txt里，最好是自己根据程序名称，命名一个小节，例如：

#port-bridge lib/libCommandSvc.so12

注意：cne不需要添加，因为我们在前面的教程里提到，在init.qcom.rc里去掉了cnd服务支持，而且在build.prop里的persist.cne.feature=1也必须改为0

这纯粹是体力活，没什么技术含量。 
这些做完后，重启一下手机，参照官方rom的build.prop中间那段加上通信lib的调用 
此时，应该就有信号了。

等读者全部适配完成以后，可以尝试做减法，再通过试验，把bin中的某些无用服务去除。

小知识：官方rom中有些服务是用于wifi、蓝牙初始化的，从nv中读mac地址等等 
但cm等第三方rom通过编写bdAddrLoader、conn_init等程序来实现这些功能(例如nexus4)。 
这显然不适合初学者，所以初学者还是老实地用官方bin并把lib补齐来用就行了。 
LG手机用来初始化wifi的服务是system/bin/atd 
泛泰手机是system/bin/pantech_server

三、重新编译

proprietary-blobs.txt添加了许多内容，重新生成vendor，重新编译 
参考前一篇结尾的错误处理，如果编译系统提示缺少intermediates，请读者依葫芦画瓢处理

四、build.prop配置项

build.prop里有一些选项与通信网络相关

rild.libpath=/system/lib/libril-qc-qmi-1.so rild.libargs=-d /dev/smd0 persist.rild.nitz_plmn= persist.rild.nitz_long_ons_0= persist.rild.nitz_long_ons_1= persist.rild.nitz_long_ons_2= persist.rild.nitz_long_ons_3= persist.rild.nitz_short_ons_0= persist.rild.nitz_short_ons_1= persist.rild.nitz_short_ons_2= persist.rild.nitz_short_ons_3= ril.subscription.types=NV,RUIM ro.vendor.extension_library=/system/lib/libqc-opt.so12345678910111213

与网络制式有关

ro.telephony.default_network=9 telephony.lteOnGsmDevice=1可以用联通3G 或 telephony.lteOnCdmaDevice=1可以用联通4G1234

以下这2项与数据网络有关

ro.use_data_netmgrd=true ro.ril.transmitpower=true12

五、数据网络

一般来讲，有信号时，数据网络应该就正常了。 
但不排除某些国外手机使用了非标准的通讯层代码，导致数据网络不可用 
笔者只适配过韩版机，所以这方面的经验不多，就无法提供更多参考了。 
已知的有LG部分韩版机可能会在通讯层里增加韩文code编码造成问题 
如果碰到这方面的问题，有编程经验的读者也无需担心，等读者有能力适配cm后，参考cm的通信层代码来修改。

这里提供一个笔者适配修改过的例子： 
韩版机LG F160 4.1系统的msm-aosp适配时碰到的开启数据网络出错问题的解决，这个虽然是4.1的例子且4.4系统不能直接参考了，但读者多了解一下总也没什么不好。 
下载：http://download.csdn.net/detail/benjaminwan/8452417 
其中stock代表aosp原始代码，f160代表修改后代码

0 0




CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(8)：wifi与蓝牙

发表于2015/2/22 20:17:00  1386人阅读

分类： android

wifi与蓝牙放在一起，因为这两者的芯片供应商有2种： 
高通(qcom)或博通(brcm) 
而且都是成对一起使用某个厂商的芯片，不会出现wifi是高通，蓝牙是博通的情况

一、如何判断wifi芯片供应商

高通wifi芯片： 
在system\etc\firmware\wlan\prima\里有WCNSSxxxx类似的文件，这些是固件 
在system\lib\modules\prima里有prima_wlan.ko，这是wifi驱动 
wifi驱动也有不以模块形式加载，而直接集成在内核里的

博通wifi芯片： 
在system\etc\firmware\里有fw_bcmdhdxxx.bin类似的文件，这些是固件 
在system\etc\wifi里有bcmdhd.cal配置文件

二、如何判断蓝牙芯片供应商

高通蓝牙： 
system\etc\init.qcom.bt.sh有初始化蓝牙的相关脚本 
system\bin里有btnvtool蓝牙工具

博通蓝牙： 
能找到BCM4334B0_002.001.013.1804.1954.hcd这样的文件 
或者有brcm_patchram_plus这个程序

三、在BoardConfig.mk里增加高通wifi项

# Wifi BOARD_HAS_QCOM_WLAN := true BOARD_WLAN_DEVICE := qcwcn WPA_SUPPLICANT_VERSION := VER_0_8_X BOARD_WPA_SUPPLICANT_DRIVER := NL80211 BOARD_WPA_SUPPLICANT_PRIVATE_LIB := lib_driver_cmd_$(BOARD_WLAN_DEVICE) BOARD_HOSTAPD_DRIVER := NL80211 BOARD_HOSTAPD_PRIVATE_LIB := lib_driver_cmd_$(BOARD_WLAN_DEVICE) WIFI_DRIVER_MODULE_PATH := "/system/lib/modules/wlan.ko" WIFI_DRIVER_MODULE_NAME := "wlan" WIFI_DRIVER_FW_PATH_STA := "sta" WIFI_DRIVER_FW_PATH_AP := "ap"123456789101112

在本例里，必须从官方rom里提取wlan.ko放到/system/lib/modules/wlan.ko 
然后参考官方卡刷包的刷机脚本updater-script 
在device/pantech/a870/Android.mk里添加如下语句

# Create wlan firmware links $(shell mkdir -p $(TARGET_OUT_ETC)/firmware/wlan/prima; \ ln -sf /data/misc/wifi/WCNSS_qcom_cfg.ini $(TARGET_OUT_ETC)/firmware/wlan/prima/WCNSS_qcom_cfg.ini; \ ln -sf /data/misc/wifi/prima.bin $(TARGET_OUT_ETC)/firmware/wlan/prima/prima.bin) # Create wlan module links $(shell mkdir -p $(TARGET_OUT)/lib/modules; \ ln -sf /system/lib/modules/prima/prima_wlan.ko $(TARGET_OUT)/lib/modules/wlan.ko)12345678

这些语句用于创建链接 
最终编译后会在updater-script里生成如下语句：

symlink("/data/misc/wifi/WCNSS_qcom_cfg.ini", "/system/etc/firmware/wlan/prima/WCNSS_qcom_cfg.ini"); symlink("/data/misc/wifi/prima.bin", "/system/etc/firmware/wlan/prima/prima.bin"); symlink("/system/lib/modules/prima/prima_wlan.ko", "/system/lib/modules/wlan.ko");123

另外值得提醒的是，WCNSS_qcom_cfg.ini这个文件，aosp或其它第三方rom必须放在system\etc\wifi才会起作用，但官方ROM却有可能放在system\etc\firmware\wlan\prima里，至于需要放在哪个路径才行，请读者自行试验。

四、在BoardConfig.mk里增加博通wifi项

# Wifi BOARD_WPA_SUPPLICANT_DRIVER := NL80211 WPA_SUPPLICANT_VERSION := VER_0_8_X BOARD_WPA_SUPPLICANT_PRIVATE_LIB := lib_driver_cmd_bcmdhd BOARD_HOSTAPD_DRIVER := NL80211 BOARD_HOSTAPD_PRIVATE_LIB := lib_driver_cmd_bcmdhd BOARD_WLAN_DEVICE := bcmdhd WIFI_DRIVER_FW_PATH_PARAM := "/sys/module/bcmdhd/parameters/firmware_path" WIFI_DRIVER_FW_PATH_STA := "/system/etc/firmware/fw_bcmdhd.bin" WIFI_DRIVER_FW_PATH_AP := "/system/etc/firmware/fw_bcmdhd_apsta.bin"12345678910

然后在build.prop还必须有wifi相关的配置项，具体请参考官方rom 
例如wifi.interface=wlan0类似这种项必须有，请读者自行尝试

五、在BoardConfig.mk里增加高通蓝牙项

# Bluetooth BOARD_HAVE_BLUETOOTH := true BOARD_HAVE_BLUETOOTH_QCOM := true BLUETOOTH_HCI_USE_MCT := true BOARD_BLUETOOTH_BDROID_BUILDCFG_INCLUDE_DIR := device/pantech/a870/bluetooth12345

六、在BoardConfig.mk里增加博通蓝牙项

# Bluetooth BOARD_HAVE_BLUETOOTH := true BOARD_HAVE_BLUETOOTH_BCM := true BOARD_BLUETOOTH_BDROID_BUILDCFG_INCLUDE_DIR := device/pantech/a870/bluetooth1234

注意：博通蓝牙的话，可能msm-aosp对其支持较差，总之笔者没有成功适配过博通蓝牙功能-_-

七、修改蓝牙设备默认名称

修改device/pantech/a870/bluetooth/bdroid_buildcfg.h 
#define BTM_DEF_LOCAL_NAME "QCOM-BTD" 
这个是蓝牙默认名称，可以自己修改，比如泛泰a870可以这样改 
#define BTM_DEF_LOCAL_NAME "IM-A870"

八、高通wifi调试

当wifi不能用时，除了看log，还可以对比官方rom来做试验 
打开adb shell并取得root权限 
接下来介绍几个调试命令 
getprop wlan.driver.status 获取wlan驱动状态 
未打开wifi时是unloaded 
打开wifi后是ok

cat /proc/modules 这个用于获取当前加载的模块 
未打开wifi时 
texfat 174987 0 - Live 0x00000000 (PO) 
mwlan_aarp 3331 0 - Live 0x00000000 (PO)

打开wifi后 
wlan 3021860 0 - Live 0x00000000 (O) 
texfat 174987 0 - Live 0x00000000 (PO) 
mwlan_aarp 3331 0 - Live 0x00000000 (PO)

0 0




CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(9)：摄像头GPS传感器

发表于2015/2/22 20:24:00  1449人阅读

分类： android

一、传感器

先从最简单的传感器开始吧 
传感器这部分没有源代码，只要从官方rom里提取相关lib就行了

#sensor lib/hw/sensors.msm8960.so lib/hw/sensors_native_hal.so lib/hw/sensors_qcom.so lib/libsensor_reg.so lib/libsensor1.so lib/libyas530.so1234567

一般msm8960平台就这几个lib，其中libyas530是电子罗盘的lib

再说说找lib方法，有2种方法互补 
首先，把lib/hw/sensorxxx传送到手机，然后重启系统，通过log查看缺少的lib并补齐 
如果还缺，就用ultraedit打开lib/hw/sensorxxx，然后搜索lib关键字，找到其依赖的其它缺少的lb，在通过打开这些缺的lib再次搜索缺少的lib

补齐了所有lib后，用z硬件测试来试验所有传感器是否正常。

二、相机

1.修改BoardConfig.mk

#Camera USE_DEVICE_SPECIFIC_CAMERA := true BOARD_USES_CAMERA_FAST_AUTOFOCUS := true USE_CAMERA_STUB := true1234

提示：USE_DEVICE_SPECIFIC_CAMERA 这句意思是不编译提供的通用相机代码，我们通过使用官方lib去实现相机功能。但对于aosp来说这项不起作用，这项是给cm用的。

2.寻找相机lib

摄像头(相机)与传感器类似，但lib更多 
摄像头(相机)hw可以通过编写代码而编译出来，但显然不适合没有基础的初学者，我们只要使用官方的hw和lib就行了 
某些手机会把相机的firmware集成到boot.img里，就像泛泰CExxx.bin，那么在ramdisk就得添加相应的内容，其它手机可能不需要

首先system/lib下含chromatix的lib全都要添加，这里以泛泰a870为例

lib/libchromatix_imx074_default_video.so lib/libchromatix_imx074_preview.so lib/libchromatix_imx074_video_hd.so lib/libchromatix_imx074_zsl.so lib/libchromatix_imx091_default_video.so lib/libchromatix_imx091_preview.so lib/libchromatix_imx091_video_hd.so lib/libchromatix_imx135_default_video.so lib/libchromatix_imx135_preview.so lib/libchromatix_imx135_video_hd.so lib/libchromatix_imx135_video_hdr.so lib/libchromatix_imx135_zsl.so lib/libchromatix_mt9e013_default_video.so lib/libchromatix_mt9e013_preview.so lib/libchromatix_mt9e013_video_hfr.so lib/libchromatix_ov2720_default_video.so lib/libchromatix_ov2720_hfr.so lib/libchromatix_ov2720_preview.so lib/libchromatix_ov2720_zsl.so lib/libchromatix_ov5647_default_video.so lib/libchromatix_ov5647_preview.so lib/libchromatix_ov8825_default_video.so lib/libchromatix_ov8825_preview.so lib/libchromatix_ov8825_video_hfr.so lib/libchromatix_ov8825_video_hfr_60fps.so lib/libchromatix_ov8825_video_hfr_90fps.so lib/libchromatix_ov8825_video_hfr_120fps.so lib/libchromatix_ov8825_zsl.so lib/libchromatix_ov9726_default_video.so lib/libchromatix_ov9726_preview.so lib/libchromatix_s5k3l1yx_default_video.so lib/libchromatix_s5k3l1yx_hfr_60fps.so lib/libchromatix_s5k3l1yx_hfr_90fps.so lib/libchromatix_s5k3l1yx_hfr_120fps.so lib/libchromatix_s5k3l1yx_preview.so lib/libchromatix_s5k3l1yx_video_hd.so lib/libchromatix_s5k3l1yx_zsl.so lib/libchromatix_s5k4e1_default_video.so lib/libchromatix_s5k4e1_preview.so123456789101112131415161718192021222324252627282930313233343536373839

然后传送官方rom的lib/hw/camera.msm8960.so到手机 
并通过前面介绍的2种找lib方法来补齐所有lib 
以下同样是泛泰a870的参考

#camera mm-qcamera-daemon lib/hw/camera.msm8960.so lib/liboemcamera.so lib/libmmjpeg.so lib/libgemini.so lib/libmercury.so lib/libmmcamera_faceproc.so lib/libmmcamera_frameproc.so lib/libmmcamera_hdr_lib.so lib/libmmcamera_image_stab.so lib/libmmcamera_imx091.so lib/libmmcamera_interface.so lib/libmmcamera_interface2.so lib/libmmcamera_plugin.so lib/libmmcamera_statsproc31.so lib/libmmcamera_wavelet_lib.so lib/libadsprpc.so lib/libmmjpeg_interface.so lib/libmmstillomx.so lib/libimage-jpeg-dec-omx-comp.so lib/libimage-jpeg-enc-omx-comp.so lib/libimage-omx-common.so lib/libOlaEngine.so lib/libmorpho_easy_hdr.so lib/libVDFaceAPI.so lib/libmmipl.so1234567891011121314151617181920212223242526

最后是这个特殊的lib，如果编译出来的能用，那测试一下没问题就用编译出来的 
如果不能用就必须从官方rom提取出来替换到编译的aosp里才行 
lib/libcamera_client.so

如果这时硬件编解码相关的lib没有缺的话，就能正常使用摄像头了，顺带的，闪光灯也应该能用了。

关于此部分的内容，可以参考进阶教程： 
http://blog.csdn.net/benjaminwan/article/details/45112505

3.相机程序的分辨率支持

反编译官方的Camera程序以及自己编译相机程序进行对比 
找res\values\arrays.xml和strings.xml，类似如下这种

<string-array name="pref_camera_picturesize_entryvalues"> <item>5248x3936</item> <item>4992x3744</item>123

把支持的像素值加进去，测试好了就可以加到device/pantech/a870/overlay里

三、GPS

笔者直接改用了CM的gps代码，因为简单好用。

1.修改源代码

对比cm与 msm-aosp的hardware/qcom/gps 
gps文件夹整个替换成cm的，全！部！替！换！

然后修改hardware/qcom/gps/loc_api/Android.mk 
去掉第一行和最后一行

ifneq ($(TARGET_PROVIDES_GPS_LOC_API),true) endif#TARGET_PROVIDES_GPS_LOC_API12

修改hardware/qcom/gps/loc_api/Android.mk 
去掉第一行和最后一行

ifneq ($(TARGET_PROVIDES_GPS_LOC_API),true) endif#TARGET_PROVIDES_GPS_LOC_API12

2.修改BoardConfig.mk

# GPS TARGET_NO_RPC := true BOARD_VENDOR_QCOM_GPS_LOC_API_HARDWARE := $(TARGET_BOARD_PLATFORM) 或把这句改成这样也行 BOARD_VENDOR_QCOM_GPS_LOC_API_HARDWARE :=msm896012345

3.libloc_api_v02.so

如果最后没有生成libloc_api_v02.so的话，从其它手机的cm11里提取一个libloc_api_v02.so来用，最后如果测试可用后，集成到device.mk里

4.gps.conf

可以从官方rom里提取，或读者自己可以去网上找到很多优化好的配置文件

5.修改device.mk

去除原来的gps项，添加如下项目

# GPS PRODUCT_PACKAGES += \ libloc_adapter \ libloc_eng \ libloc_api_v02 \ libgps.utils \ gps.msm89601234567

6.不要使用任何官方的gps lib

这些官方lib都不要使用： 
system/lib/ liblocxxx 
vendor/lib/liblocxxx,liblocationservice,libgeofence.so 
也不要使用使用官方的lib/hw/gps.default.so 
否则会造成冲突

7.重新编译

如果正常，会生成lib\hw\gps.msm8960.so以及相关lib，然后刷机测试

0 0


CSDN博客

￼ benjaminwan

Msm8960(APQ8064)平台的MSM-AOSP-kitkat编译适配(10)：其它

发表于2015/2/22 20:32:22  1633人阅读

分类： android

本篇是此系列文章的最后一篇。

一、Power

官方rom里如果有system\vendor\lib\hw\power.qcom.so 
则可以加到proprietary-blobs.txt 
其实同版本适配时，官方rom里的多数lib都可以替换到编译出来的msm-aosp里

二、拔电池掉时间问题

CM系统的时间服务只要在BoardConfig.mk里加一个语句BOARD_USES_QC_TIME_SERVICES := true就行了，然后提取官方的lib/libtime_genoff.so来用就搞定了 
而msm-aosp则麻烦多了，它没有专门的配置项和代码 
你得先用厨房工具合并odex，把官方rom的TimeService.apk提取出来用，并放到device/pantech/a870/etc文件夹 
并在etc文件夹下新建一个Android.mk，内容如下

LOCAL_PATH:= $(call my-dir) include \$(CLEAR_VARS) LOCAL_MODULE := TimeService LOCAL_MODULE_PATH := $(TARGET_OUT)/app/ LOCAL_SRC_FILES := TimeService.apk LOCAL_MODULE_TAGS := optional LOCAL_MODULE_CLASS := APPS LOCAL_MODULE_SUFFIX:=$(COMMON_ANDROID_PACKAGE_SUFFIX) LOCAL_CERTIFICATE := platform include \$(BUILD_PREBUILT)12345678910

然后写到device.mk里

#TimeService.apk PRODUCT_PACKAGES += TimeService12

最后在proprietary-blobs.txt里添加

#TimeService.apk lib/libtime_genoff.so lib/libTimeService.so123

三、按键灯、呼吸灯

这个也是各种手机不一样，而且还必须修改代码-_- 
对于没有编程基础的读者，就直接用官方rom的system/lib/hw/lights.msm8960.so

1.首先通过调试确定各种灯的调用路径

开一个adb shell，并取得root权限

cd /sys/class/leds ls12

这样就可以列出当前有那些led设备，并记录下来
这里就以LG F200这种有实体按键的手机来举例吧

lcd背光 /sys/class/leds/lcd-backlight/brightness 红灯 /sys/class/leds/led:red/brightness 绿灯 /sys/class/leds/led:green/brightness 蓝灯 /sys/class/leds/led:blue/brightness 按键灯 /sys/class/leds/button-backlight/brightness1234567891011121314

如果读者想具体试验一下用命令控制各种灯的话，笔者介绍几个命令

echo 200 > /sys/class/leds/lcd-backlight/brightness 设置背光值为200 echo 0 > /sys/class/leds/lcd-backlight/brightness 设置背光值为0 echo 255 > /sys/class/leds/led:red/brightness 开红灯 echo 0 > /sys/class/leds/led:red/brightness 关红灯 cat /sys/class/leds/led:red/brightness查看当前的灯亮度值 cat /sys/class/leds/led:red/max_brightness查看灯的最大亮度值12345678

2.修改liblight代码

msm-aosp不像cm那样可以把liblight单独出来，所以咱就直接到源代码目录去修改 
hardware/qcom/display/liblight 
先把lights.c压缩备份一下 
开始修改lights.c，首先修改三个颜色的呼吸灯调用地址 
￼
仿照呼吸灯的行，增加一行按键灯的路径

char const*const BUTTON_FILE = "/sys/class/leds/button-backlight/brightness";12

下面的这些路径，如果读者的机型不支持(也就是没有这个路径)，那就把这些代码删掉 
￼

在rgb_to_brightness下面添加一段按键灯的调用函数 
￼

static int set_light_buttons(struct light_device_t* dev, struct light_state_t const* state) { int err = 0; int on = is_lit(state); pthread_mutex_lock(&g_lock); err = write_int(BUTTON_FILE, on?255:0); pthread_mutex_unlock(&g_lock); return err; }1234567891011

然后拉到文件底部增加按键背光调用入口 
￼

else if (0 == strcmp(LIGHT_ID_BUTTONS, name)) set_light = set_light_buttons;12

这就是大概的步骤，对于没有编程基础的读者来说可能比较困难 
请参考笔者提供的范例吧： 
http://download.csdn.net/detail/benjaminwan/8452531

最后，提供一个泛泰A910的呼吸灯适配例子： 
http://blog.csdn.net/benjaminwan/article/details/45112175

四、振动

这一段专门为泛泰而写 
因为泛泰全系列机型内核里的振动代码都是非标准的

1.引用syhost对此部分的解析

http://blog.csdn.net/syhost/article/details/12125971 
不论读者能否理解，咱们来实际调试一下就明白了 
老套路了，开一个adb shell，并取得root权限 
标准振动代码的手机，只要执行这句就能让手机振动起来，振动1秒 
echo 1000 > /sys/class/timed_output/vibrator/enable

而泛泰手机官方内核必须是 
echo 1311720 > /sys/class/timed_output/vibrator/enable

1311720这个值是如何得到的呢？ 
如果读者没有任何计算机基础，那么就以最直观的方式来试吧，打开window自带的计算器，使用程序员模式。 
十进制输入数值1000，切换到十六进制，按Or键，再输入140000，按等于号，并切换到十进制显示就是1311720 
简单来说，就是3E8|0x140000 = 1403E8，即，振动时间|0x140000

2.修改振动调用代码

对于cm来讲，振动代码可以BOARD_HAS_VIBRATOR_IMPLEMENTATION来自定义 
msm-aosp比较简陋啦，只好直接改代码了 
hardware/libhardware_legacy/vibrator/vibrator.c 
只要在sendit函数里添加一句timeout_ms = 0x140000 | timeout_ms;即可 
￼

0 0













